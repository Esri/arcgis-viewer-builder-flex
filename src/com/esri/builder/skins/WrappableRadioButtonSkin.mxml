<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->

<!--- The default skin class for a Spark RadioButton component.

       @see spark.components.RadioButton
       @see spark.components.RadioButtonGroup

      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             alpha.disabledStates="0.5">

    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.RadioButton")]
    ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized.
           For button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = [ "labelDisplay", "dot" ];

        /**
         * @private
         */
        override public function get colorizeExclusions():Array
        {
            return exclusions;
        }

        /* Define the symbol fill items that should be colored by the "symbolColor" style. */
        static private const symbols:Array = [ "dotFill" ];

        /**
         * @private
         */
        override public function get symbolItems():Array
        {
            return symbols
        }
        ;

        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
    </fx:Script>

    <fx:Script>
        <![CDATA[
            /**
             * @private
             */
            private static const focusExclusions:Array = [ "labelDisplay" ];

            /**
             *  @private
             */
            override public function get focusSkinExclusions():Array
            {
                return focusExclusions;
            }
            ;
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="up"/>
        <s:State name="over" stateGroups="overStates"/>
        <s:State name="down" stateGroups="downStates"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="upAndSelected" stateGroups="selectedStates"/>
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates"/>
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates"/>
        <s:State name="disabledAndSelected" stateGroups="disabledStates, selectedStates"/>
    </s:states>

    <s:Group width="13" height="13"
             verticalCenter="0">
        <!-- drop shadow -->
        <s:Ellipse left="-1" right="-1" top="-1" bottom="-1">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry alpha="0.011"
                                     alpha.downStates="0"
                                     color="0x000000"
                                     color.downStates="0xFFFFFF"/>
                    <s:GradientEntry alpha="0.121"
                                     alpha.downStates="0.57"
                                     color="0x000000"
                                     color.downStates="0xFFFFFF"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Ellipse>

        <!-- fill -->
        <s:Ellipse left="1" right="1" top="1" bottom="1">
            <s:fill>
                <s:LinearGradient rotation="90">
                    <s:GradientEntry alpha="0.85"
                                     color="0xFFFFFF"
                                     color.downStates="0xAAAAAA"
                                     color.overStates="0xBBBDBD"/>
                    <s:GradientEntry alpha="0.85"
                                     color="0xD8D8D8"
                                     color.downStates="0x929496"
                                     color.overStates="0x9FA0A1"/>
                </s:LinearGradient>
            </s:fill>
        </s:Ellipse>

        <!-- fill highlight -->
        <s:Path data="M 1 6 Q 2 2 6 1 Q 11 2 12 6 h -9">
            <s:fill>
                <s:SolidColor alpha="0.33" color="0xFFFFFF"/>
            </s:fill>
        </s:Path>

        <!-- layer 6: highlight stroke (all states except down) -->
        <s:Ellipse left="1" right="1" top="1" bottom="1">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry alpha.overStates="0.22"
                                     color="0xFFFFFF"
                                     color.downStates="0x939393"/>
                    <s:GradientEntry alpha.overStates="0.22"
                                     color="0xD8D8D8"
                                     color.downStates="0xB1B1B1"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Ellipse>
        <s:Rect height="1"
                left="5" right="5" top="1">
            <s:fill>
                <s:SolidColor alpha.overStates="0.22"
                              color="0xFFFFFF"
                              color.downStates="0x939393"/>
            </s:fill>
        </s:Rect>

        <!-- border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
        <s:Ellipse left="0" right="0" top="0" bottom="0">
            <s:stroke>
                <s:LinearGradientStroke rotation="90" weight="1">
                    <s:GradientEntry alpha="0.70" color="0x000000"/>
                    <s:GradientEntry alpha="0.80" color="0x000000"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Ellipse>

        <!-- dot -->
        <!--- Defines the appearance of the RadioButton's dot. To customize the appearance of the dot, create a custom RadioButtonSkin class. -->
        <s:Path id="dot"
                left="4" top="4"
                data="M 2.5 0 Q 4.5 0.5 5 2.5 Q 4.5 4.5 2.5 5 Q 0.5 4.5 0 2.5 Q 0.5 0.5 2.5 0"
                includeIn="selectedStates"
                itemCreationPolicy="immediate">
            <s:fill>
                <!--- @private
                      Defines the appearance of the dot's fill. The default color is 0x000000. The default alpha is .9. -->
                <s:SolidColor id="dotFill"
                              alpha="0.9"
                              color="0"/>
            </s:fill>
        </s:Path>
        <s:Path left="4" top="7"
                data="M 0 0 Q 0.5 2 2.5 2.0 Q 3.5 2.0 4 0"
                includeIn="selectedStates">
            <s:stroke>
                <s:LinearGradientStroke>
                    <s:GradientEntry alpha="0.3" color="0xFFFFFF"/>
                    <s:GradientEntry alpha="0.7" color="0xFFFFFF"/>
                    <s:GradientEntry alpha="0.3" color="0xFFFFFF"/>
                </s:LinearGradientStroke>
            </s:stroke>
        </s:Path>
    </s:Group>

    <s:Label id="labelDisplay"
             left="18" right="0" top="3" bottom="3"
             maxDisplayedLines="2"
             textAlign="start"
             verticalAlign="middle"
             verticalCenter="2"/>
</s:SparkSkin>
