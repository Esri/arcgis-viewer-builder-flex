<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             xmlns:graphics="assets.graphics.*"
             alpha.disabledStates="0.5"
             blendMode="normal">

    <fx:Metadata>
        <![CDATA[
        [HostComponent("com.esri.builder.components.URLInputCheckerBase")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[
            import mx.core.FlexVersion;

            private var paddingChanged:Boolean;

            /* Define the skin elements that should not be colorized. */
            static private const exclusions:Array = [ "background", "textDisplay", "promptDisplay", "border" ];

            /* exclusions before Flex 4.5 for backwards-compatibility purposes */
            static private const exclusions_4_0:Array = [ "background", "textDisplay", "promptDisplay" ];

            /**
             * @private
             */
            override public function get colorizeExclusions():Array
            {
                // Since border is styleable via borderColor, no need to allow chromeColor to affect
                // the border.  This is wrapped in a compatibility flag since this change was added  
                // in Flex 4.5
                if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
                {
                    return exclusions_4_0;
                }

                return exclusions;
            }

            /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
            static private const contentFill:Array = [ "bgFill" ];

            override public function get contentItems():Array
            {
                return contentFill
            }
            ;

            override protected function commitProperties():void
            {
                super.commitProperties();

                if (paddingChanged)
                {
                    updatePadding();
                    paddingChanged = false;
                }
            }

            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }

            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                if (getStyle("borderVisible") == true)
                {
                    border.visible = true;
                    shadow.visible = true;
                    background.left = background.top = background.right = background.bottom = 1;
                    textDisplay.left = textDisplay.top = textDisplay.bottom = 1;
                    textDisplay.right = 19;
                    if (promptDisplay)
                    {
                        promptDisplay.setLayoutBoundsSize(unscaledWidth - 2, unscaledHeight - 2);
                        promptDisplay.setLayoutBoundsPosition(1, 1);
                    }
                }
                else
                {
                    border.visible = false;
                    shadow.visible = false;
                    background.left = background.top = background.right = background.bottom = 0;
                    textDisplay.left = textDisplay.top = textDisplay.bottom = 0;
                    textDisplay.right = 18;
                    if (promptDisplay)
                    {
                        promptDisplay.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
                        promptDisplay.setLayoutBoundsPosition(0, 0);
                    }
                }

                borderStroke.color = getStyle("borderColor");
                borderStroke.alpha = getStyle("borderAlpha");

                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }

            private function updatePadding():void
            {
                if (!textDisplay)
                {
                    return;
                }

                // Push padding styles into the textDisplay
                var padding:Number;

                padding = getStyle("paddingLeft");
                if (textDisplay.getStyle("paddingLeft") != padding)
                {
                    textDisplay.setStyle("paddingLeft", padding);
                }

                padding = getStyle("paddingTop");
                if (textDisplay.getStyle("paddingTop") != padding)
                {
                    textDisplay.setStyle("paddingTop", padding);
                }

                padding = getStyle("paddingRight");
                if (textDisplay.getStyle("paddingRight") != padding)
                {
                    textDisplay.setStyle("paddingRight", padding);
                }

                padding = getStyle("paddingBottom");
                if (textDisplay.getStyle("paddingBottom") != padding)
                {
                    textDisplay.setStyle("paddingBottom", padding);
                }

                if (!promptDisplay)
                {
                    return;
                }

                padding = getStyle("paddingLeft");
                if (promptDisplay.getStyle("paddingLeft") != padding)
                {
                    promptDisplay.setStyle("paddingLeft", padding);
                }

                padding = getStyle("paddingTop");
                if (promptDisplay.getStyle("paddingTop") != padding)
                {
                    promptDisplay.setStyle("paddingTop", padding);
                }

                padding = getStyle("paddingRight");
                if (promptDisplay.getStyle("paddingRight") != padding)
                {
                    promptDisplay.setStyle("paddingRight", padding);
                }

                padding = getStyle("paddingBottom");
                if (promptDisplay.getStyle("paddingBottom") != padding)
                {
                    promptDisplay.setStyle("paddingBottom", padding);
                }
            }

            /**
             *  @private
             */
            override public function styleChanged(styleProp:String):void
            {
                var allStyles:Boolean = !styleProp || styleProp == "styleName";

                super.styleChanged(styleProp);

                if (allStyles || styleProp.indexOf("padding") == 0)
                {
                    paddingChanged = true;
                    invalidateProperties();
                }
            }
        ]]>
    </fx:Script>

    <fx:Script>
        <![CDATA[
            private static const focusExclusions:Array = [ "textDisplay" ];

            /**
             *  @private
             */
            override public function get focusSkinExclusions():Array
            {
                return focusExclusions;
            }
            ;
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="busy"/>
        <s:State name="valid"/>
        <s:State name="invalid"/>
        <s:State name="normal"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="normalWithPrompt"/>
        <s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
    </s:states>

    <!-- border -->
    <!--- @private -->
    <s:Rect id="border"
            left="0" right="0" top="0" bottom="0">
        <s:stroke>
            <!--- @private -->
            <s:SolidColorStroke id="borderStroke" weight="1"/>
        </s:stroke>
    </s:Rect>

    <!-- fill -->
    <!--- Defines the appearance of the TextInput component's background. -->
    <s:Rect id="background"
            left="1" right="1" top="1" bottom="1">
        <s:fill>
            <!--- @private Defines the background fill color. -->
            <s:SolidColor id="bgFill" color="0xFFFFFF"/>
        </s:fill>
    </s:Rect>

    <!-- shadow -->
    <!--- @private -->
    <s:Rect id="shadow"
            height="1"
            left="1" right="1" top="1">
        <s:fill>
            <s:SolidColor alpha="0.12" color="0x000000"/>
        </s:fill>
    </s:Rect>

    <!-- text & status icon-->
    <s:RichEditableText id="textDisplay"
                        verticalAlign="middle"
                        widthInChars="10"/>

    <s:Label id="promptDisplay"
             includeIn="normalWithPrompt, disabledWithPrompt"
             includeInLayout="false"
             maxDisplayedLines="1"
             mouseChildren="false"
             mouseEnabled="false"
             verticalAlign="middle"/>

    <graphics:red_x width="15" height="15"
                    right="1"
                    includeIn="invalid"
                    verticalCenter="0"/>

    <graphics:green_check width="15" height="15"
                          right="1"
                          includeIn="valid"
                          layoutDirection="ltr"
                          verticalCenter="0"/>

    <s:SWFLoader width="15" height="15"
                 right="1"
                 autoLoad="true"
                 includeIn="busy"
                 source="@Embed(source='/assets/images/ico_loading.swf')"
                 verticalCenter="0"/>
</s:SparkSkin>
