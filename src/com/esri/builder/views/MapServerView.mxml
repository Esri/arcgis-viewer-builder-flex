<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:components="com.esri.builder.components.*"
         width="100%" height="100%"
         creationComplete="init()"
         implements="com.esri.builder.views.supportClasses.IIncludeLayerSelection">
    <fx:Script>
        <![CDATA[
            import com.esri.builder.components.serviceBrowser.supportClasses.ServiceBrowserEvent;
            import com.esri.builder.model.RecentlyUsedURLsModel;
            import com.esri.builder.views.supportClasses.IIncludeLayerDispatcher;

            private function init():void
            {
                var mostRecentURL:String = RecentlyUsedURLsModel.getInstance().mostRecentURL();
                serviceBrowser.serviceURL = mostRecentURL ? mostRecentURL : 'http://sampleserver1.arcgisonline.com/ArcGIS/rest/services';
            }

            private function serviceBrowser_selectionChangeHandler(event:ServiceBrowserEvent):void
            {
                if (owner)
                {
                    (owner as IIncludeLayerDispatcher).updateLayerSelection();
                }
            }

            protected function serviceBrowser_itemSelectedHandler(event:ServiceBrowserEvent):void
            {
                if (owner && event.hasValidSelection)
                {
                    (owner as IIncludeLayerDispatcher).dispatchIncludeLayer();
                }
            }

            public function hasValidSelection():Boolean
            {
                return serviceBrowser.hasValidSelection;
            }
        ]]>
    </fx:Script>

    <s:Rect left="0" right="0" top="0" bottom="0">
        <s:stroke>
            <s:SolidColorStroke color="0x000000" weight="1"/>
        </s:stroke>
    </s:Rect>

    <components:ServiceBrowser id="serviceBrowser"
                               width="100%" height="100%"
                               left="8" right="8" top="8" bottom="8"
                               allowMultipleSelection="true"
                               itemSelected="serviceBrowser_itemSelectedHandler(event)"
                               searchType="maplayers"
                               selectionChange="serviceBrowser_selectionChangeHandler(event)"/>
</s:Group>
