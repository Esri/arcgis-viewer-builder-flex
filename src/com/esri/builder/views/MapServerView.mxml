<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         width="100%" height="100%"
         implements="com.esri.builder.views.supportClasses.IIncludeLayerSelection">
    <fx:Script>
        <![CDATA[
            import com.esri.builder.components.ServiceBrowser;
            import com.esri.builder.components.serviceBrowser.supportClasses.ServiceBrowserEvent;
            import com.esri.builder.views.supportClasses.IIncludeLayerDispatcher;

            import mx.collections.ArrayList;

            private var serviceBrowser:ServiceBrowser;

            public function setServiceBrowser(sb:ServiceBrowser):void
            {
                if (sb)
                {
                    serviceBrowser = sb;
                    serviceBrowser.addEventListener(ServiceBrowserEvent.ITEM_SELECTED, serviceBrowser_itemSelectedHandler);
                    serviceBrowser.addEventListener(ServiceBrowserEvent.SELECTION_CHANGE, serviceBrowser_selectionChangeHandler);
                    addElement(sb);
                    dispatchLayerSelectionUpdate();
                }
            }

            public function clearServiceBrowser():void
            {
                if (serviceBrowser)
                {
                    serviceBrowser.removeEventListener(ServiceBrowserEvent.ITEM_SELECTED, serviceBrowser_itemSelectedHandler);
                    serviceBrowser.removeEventListener(ServiceBrowserEvent.SELECTION_CHANGE, serviceBrowser_selectionChangeHandler);
                    removeElement(serviceBrowser);
                    serviceBrowser = null;
                }
            }

            private function serviceBrowser_selectionChangeHandler(event:ServiceBrowserEvent):void
            {
                dispatchLayerSelectionUpdate();
            }

            private function dispatchLayerSelectionUpdate():void
            {
                if (owner)
                {
                    (owner as IIncludeLayerDispatcher).updateLayerSelection();
                }
            }

            protected function serviceBrowser_itemSelectedHandler(event:ServiceBrowserEvent):void
            {
                if (owner && event.hasValidSelection)
                {
                    (owner as IIncludeLayerDispatcher).dispatchIncludeLayer();
                }
            }

            public function hasValidSelection():Boolean
            {
                return serviceBrowser ? serviceBrowser.hasValidSelection : false;
            }

            public function get serviceSelection():ArrayList
            {
                return serviceBrowser ? serviceBrowser.serviceSelection : new ArrayList();
            }
        ]]>
    </fx:Script>

    <s:Rect left="0" right="0" top="0" bottom="0">
        <s:stroke>
            <s:SolidColorStroke color="0x000000" weight="1"/>
        </s:stroke>
    </s:Rect>

    <!--Service Browser added dynamically-->
</s:Group>
