<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:s="library://ns.adobe.com/flex/spark"
                      xmlns:mx="library://ns.adobe.com/flex/mx"
                      creationComplete="this_creationCompleteHandler(event)"
                      minHeight="150"
                      minWidth="450">
    <fx:Script>
        <![CDATA[
            import com.esri.builder.eventbus.AppEvent;
            import com.esri.builder.model.Model;
            import com.esri.builder.views.*;

            import mx.events.CloseEvent;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;

            [Bindable]
            private var outputDirectoryPath:String;

            protected function this_creationCompleteHandler(event:FlexEvent):void
            {
                outputDirectoryPath = File.desktopDirectory.nativePath;
            }

            private function cancelButton_clickHandler(event:MouseEvent):void
            {
                dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
            }

            private function okButton_clickHandler(event:MouseEvent):void
            {
                dispatchExportExecute();
            }

            private function dispatchExportExecute():void
            {
                Model.instance.status = '';
                var outputDirectory:File = new File(outputDirectoryPath);

                var isOutputDirectoryValid:Boolean = (outputDirectory.exists && !outputDirectory.isDirectory);
                if (isOutputDirectoryValid)
                {
                    BuilderAlert.show(resourceManager.getString('BuilderStrings', 'exportApplicationPopUp.cannotExportToDirectory', [ outputDirectoryPath ]),
                                      resourceManager.getString('BuilderStrings', 'exportApplicationPopUp.title'));
                }
                else
                {
                    dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
                    AppEvent.dispatch(AppEvent.EXPORT_EXECUTE, outputDirectory);
                }
            }

            private function browseButton_clickHandler(event:MouseEvent):void
            {
                const file:File = new File();
                file.addEventListener(Event.SELECT, file_selectHandler);
                file.browseForDirectory(resourceManager.getString('BuilderStrings', 'exportApplicationPopUp.select'));
            }

            private function file_selectHandler(event:Event):void
            {
                PopUpManager.centerPopUp(this);
                var selectedDirectory:File = event.target as File;
                outputDirectoryPath = selectedDirectory.nativePath;
            }

            protected function outputDirectoryPathInput_enterHandler(event:FlexEvent):void
            {
                dispatchExportExecute();
            }
        ]]>
    </fx:Script>

    <!--background-->
    <s:Rect left="0" right="0" top="0" bottom="0">
        <s:fill>
            <s:SolidColor color="#FFFFFF"/>
        </s:fill>

        <s:stroke>
            <s:SolidColorStroke caps="none"
                                color="#000000"
                                joints="miter"
                                miterLimit="4"
                                weight="2"/>
        </s:stroke>
    </s:Rect>

    <s:Rect height="25"
            left="2" right="2" top="2">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry alpha="1"
                                 color="#FFFFFF"
                                 ratio="0"/>
                <s:GradientEntry alpha="1.0"
                                 color="#CCCCCC"
                                 ratio="1"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>

    <s:Line left="0" right="0" top="26">
        <s:stroke>
            <s:SolidColorStroke caps="none"
                                color="#000000"
                                joints="miter"
                                miterLimit="4"
                                weight="2"/>
        </s:stroke>
    </s:Line>

    <!--content-->
    <s:Label left="10" top="9"
             color="#000000"
             fontSize="14"
             styleName="boldText"
             text="{resourceManager.getString('BuilderStrings', 'exportApplicationPopUp.title')}"
             textAlign="center"
             verticalAlign="middle"/>

    <s:Form horizontalCenter="0" verticalCenter="0">
        <s:FormItem label="{resourceManager.getString('BuilderStrings', 'exportApplicationPopUp.outputDirectory')}">
            <s:layout>
                <s:HorizontalLayout/>
            </s:layout>

            <s:TextInput width="350"
                         direction="ltr"
                         enter="outputDirectoryPathInput_enterHandler(event)"
                         maxChars="100"
                         text="@{outputDirectoryPath}"/>

            <s:Button id="browseButton"
                      click="browseButton_clickHandler(event)"
                      label="{resourceManager.getString('BuilderStrings', 'exportApplicationPopUp.browse')}"
                      skinClass="com.esri.builder.skins.BlueButtonSkin"
                      toolTip="{resourceManager.getString('BuilderStrings','exportApplicationPopUp.browseTooltip')}"/>
        </s:FormItem>
    </s:Form>

    <s:HGroup bottom="5"
              horizontalAlign="center"
              horizontalCenter="0"
              verticalAlign="middle">
        <s:Button id="okButton"
                  click="okButton_clickHandler(event)"
                  label="{resourceManager.getString('BuilderStrings', 'exportApplicationPopUp.ok')}"
                  skinClass="com.esri.builder.skins.BlueButtonSkin"/>

        <s:Button id="cancelButton"
                  click="cancelButton_clickHandler(event)"
                  label="{resourceManager.getString('BuilderStrings', 'cancel')}"
                  skinClass="com.esri.builder.skins.LinkButtonSkin"/>
    </s:HGroup>
</s:SkinnableContainer>
