<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    width="100%" height="100%"
                    creationComplete="this_creationCompleteHandler(event)">
    <fx:Script>
        <![CDATA[
            import com.esri.builder.eventbus.AppEvent;
            import com.esri.builder.model.Model;

            import mx.collections.ArrayList;
            import mx.events.FlexEvent;

            import spark.collections.Sort;
            import spark.events.IndexChangeEvent;
            import spark.events.TextOperationEvent;

            private var _isConfigXMLSaved:Boolean;

            [Bindable]
            private var fontList:ArrayList;

            private function sendSignal():void
            {
                AppEvent.dispatch(AppEvent.TITLES_EXECUTE, { title: appTitleTextInput.text, subTitle: subTitleTextInput.text });
            }

            private function appTitleTextInput_changeHandler(event:TextOperationEvent):void
            {
                sendSignal();
            }

            private function subTitleTextInput_changeHandler(event:TextOperationEvent):void
            {
                sendSignal();
            }

            private function fontName_changeHandler(event:IndexChangeEvent):void
            {
                AppEvent.dispatch(AppEvent.CHANGE_FONT_NAME, fontName.selectedItem);
                Model.instance.config.fontName = fontName.selectedItem;
            }

            private function appTitleFontName_changeHandler(event:IndexChangeEvent):void
            {
                AppEvent.dispatch(AppEvent.CHANGE_APP_TITLE_FONT_NAME, appTitleFontName.selectedItem);
                Model.instance.config.appTitleFontName = appTitleFontName.selectedItem;
            }

            private function subTitleFontName_changeHandler(event:IndexChangeEvent):void
            {
                AppEvent.dispatch(AppEvent.CHANGE_SUB_TITLE_FONT_NAME, subTitleFontName.selectedItem);
                Model.instance.config.subTitleFontName = subTitleFontName.selectedItem;
            }

            protected function this_creationCompleteHandler(event:FlexEvent):void
            {
                AppEvent.addListener(AppEvent.CONFIG_XML_SAVED, configXMLSaved);
                AppEvent.addListener(AppEvent.APP_READY_TO_EDIT, appReadyToEditHandler);
                resourceManager.addEventListener(Event.CHANGE, resourceManager_changeHandler);

                initializeFontList();
                selectDefaultFonts();
            }

            private function configXMLSaved(event:AppEvent):void
            {
                if (event.data == 'titles')
                {
                    _isConfigXMLSaved = true;
                }
            }

            private function appReadyToEditHandler(event:AppEvent):void
            {
                selectDefaultFonts();
            }

            private function selectDefaultFonts():void
            {
                if (Model.instance.config.fontName)
                {
                    fontName.selectedItem = Model.instance.config.fontName;
                }
                else
                {
                    fontName.selectedIndex = 0;
                }

                if (Model.instance.config.appTitleFontName)
                {
                    appTitleFontName.selectedItem = Model.instance.config.appTitleFontName;
                }
                else
                {
                    appTitleFontName.selectedIndex = 0;
                }

                if (Model.instance.config.subTitleFontName)
                {
                    subTitleFontName.selectedItem = Model.instance.config.subTitleFontName;
                }
                else
                {
                    subTitleFontName.selectedIndex = 0;
                }
            }

            private function resourceManager_changeHandler(event:Event):void
            {
                initializeFontList();
            }

            private function initializeFontList():void
            {
                fontList = new ArrayList(prioritizeFontNames(getAvailableFontNames(),
                                                             defaultFontNames));
            }

            private function getAvailableFontNames():Array
            {
                var availableFonts:Array = Font.enumerateFonts(true);
                var allFontNames:Array = [];

                for each (var font:Font in availableFonts)
                {
                    allFontNames.push(font.fontName);
                }

                const localeBasedSorter:Sort = new Sort();
                localeBasedSorter.setStyle('locale', Model.instance.locale);
                localeBasedSorter.sort(allFontNames);

                return allFontNames;
            }

            public function get defaultFontNames():Array
            {
                var fontNames:Array = [ resourceManager.getString('BuilderStrings', 'titlesWindow.font1'),
                                        resourceManager.getString('BuilderStrings', 'titlesWindow.font2'),
                                        resourceManager.getString('BuilderStrings', 'titlesWindow.font3'),
                                        resourceManager.getString('BuilderStrings', 'titlesWindow.font4'),
                                        resourceManager.getString('BuilderStrings', 'titlesWindow.font5'),
                                        resourceManager.getString('BuilderStrings', 'titlesWindow.font6')];

                return fontNames.filter(validFontName);
            }

            private function validFontName(fontName:String, index:int, array:Array):Boolean
            {
                return Boolean(fontName);
            }

            private function prioritizeFontNames(fontNames:Array, preferredFontNames:Array):Array
            {
                var prioritizedFontNames:Array = preferredFontNames.concat();
                var isFontNameUnique:Boolean;

                for each (var fontName:String in fontNames)
                {
                    isFontNameUnique = (preferredFontNames.indexOf(fontName) == -1);
                    if (isFontNameUnique)
                    {
                        prioritizedFontNames.push(fontName);
                    }
                }

                return prioritizedFontNames;
            }
        ]]>
    </fx:Script>

    <s:HGroup height="100%"
              gap="0"
              verticalAlign="middle">
        <s:Form>
            <s:layout>
                <s:FormLayout gap="-4" paddingRight="-20"/>
            </s:layout>

            <s:FormItem label="{resourceManager.getString('BuilderStrings', 'titlesWindow.appTitle')}">
                <s:TextInput id="appTitleTextInput"
                             width="250"
                             change="appTitleTextInput_changeHandler(event)"
                             text="@{Model.instance.config.appTitle}"/>
            </s:FormItem>

            <s:FormItem label="{resourceManager.getString('BuilderStrings', 'titlesWindow.subTitle')}">
                <s:TextInput id="subTitleTextInput"
                             width="250"
                             change="subTitleTextInput_changeHandler(event)"
                             text="@{Model.instance.config.subTitle}"/>
            </s:FormItem>
        </s:Form>

        <s:Form>
            <s:layout>
                <s:FormLayout gap="-17" paddingLeft="-20"/>
            </s:layout>

            <s:FormItem left="0" right="0"
                        label="{resourceManager.getString('BuilderStrings', 'stylesWindow.appTitleFontName')}">
                <s:ComboBox id="appTitleFontName"
                            change="appTitleFontName_changeHandler(event)"
                            dataProvider="{fontList}"
                            requireSelection="true"
                            typicalItem="Comic Sans MS"/>
            </s:FormItem>

            <s:FormItem left="0" right="0"
                        label="{resourceManager.getString('BuilderStrings', 'stylesWindow.subTitleFontName')}">
                <s:ComboBox id="subTitleFontName"
                            change="subTitleFontName_changeHandler(event)"
                            dataProvider="{fontList}"
                            requireSelection="true"
                            typicalItem="Comic Sans MS"/>
            </s:FormItem>

            <s:FormItem left="0" right="0"
                        label="{resourceManager.getString('BuilderStrings', 'stylesWindow.fontName')}">
                <s:ComboBox id="fontName"
                            change="fontName_changeHandler(event)"
                            dataProvider="{fontList}"
                            requireSelection="true"
                            typicalItem="Comic Sans MS"/>
            </s:FormItem>
        </s:Form>
    </s:HGroup>

    <s:Button right="10" top="10"
              click="AppEvent.dispatch(AppEvent.SAVE_CONFIG_XML, 'titles')"
              label="{resourceManager.getString('BuilderStrings', 'save')}"
              skinClass="com.esri.builder.skins.BlueSaveButtonSkin"/>

    <s:RichEditableText right="10" bottom="10"
                        editable="false"
                        selectable="true">
        <s:textFlow>
            <s:TextFlow>
                <s:a href="{resourceManager.getString('BuilderStrings', 'designView.stylesHelpURL')}" target="_blank">{resourceManager.getString('BuilderStrings', 'layoutView.learnMore')}</s:a>
            </s:TextFlow>
        </s:textFlow>
    </s:RichEditableText>
</s:NavigatorContent>
