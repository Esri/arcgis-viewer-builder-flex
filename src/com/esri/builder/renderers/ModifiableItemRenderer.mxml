<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:graphics="assets.graphics.*"
                doubleClick="this_doubleClickHandler(event)"
                doubleClickEnabled="true">
    <fx:Script>
        <![CDATA[
            import com.esri.builder.components.IModifyItemDispatcher;

            import mx.collections.IList;
            import mx.events.CollectionEvent;

            private var dataProvider:IList;

            [Bindable]
            private var isHovered:Boolean;

            override protected function set hovered(value:Boolean):void
            {
                super.hovered = value;
                isHovered = value;
            }

            override public function setCurrentState(stateName:String, playTransition:Boolean = true):void
            {
                //ignore these states to prevent item renderer changing custom states
                var isIgnorableState:Boolean = (!stateName || stateName == "normal" || stateName == "hovered" || stateName == "selected");
                if (!isIgnorableState)
                {
                    super.setCurrentState(stateName, playTransition);
                }
            }

            override public function set data(value:Object):void
            {
                super.data = value;
                updateState();
            }

            private function updateState():void
            {
                var totalItems:int = dataProvider.length;

                if (totalItems == 1)
                {
                    currentState = "onlyItem";
                }
                else if (itemIndex == 0)
                {
                    currentState = "atTop";
                }
                else if (itemIndex == (totalItems - 1))
                {
                    currentState = "atBottom";
                }
                else
                {
                    currentState = "atMiddle";
                }
            }

            override public function set owner(value:DisplayObjectContainer):void
            {
                super.owner = value;
                //data provider always DataGroup or SkinnableDataContainer
                dataProvider = owner['dataProvider'];
                dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, dataProvider_collectionChangeHandler, false, 0, true);
            }

            private function dataProvider_collectionChangeHandler(event:CollectionEvent):void
            {
                updateState();
            }

            protected function this_doubleClickHandler(event:MouseEvent):void
            {
                if (event.currentTarget == moveUpButton
                    || event.currentTarget == moveDownButton
                    || event.currentTarget == editButton
                    || event.currentTarget == deleteButton)
                {
                    return;
                }

                (owner as IModifyItemDispatcher).dispatchEditItem(data);
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <s:GlowFilter id="glowFilter"
                      blurX="5"
                      blurY="5"
                      color="0x000000"/>
    </fx:Declarations>

    <s:states>
        <s:State name="onlyItem"/>
        <s:State name="atTop"/>
        <s:State name="atMiddle"/>
        <s:State name="atBottom"/>
    </s:states>

    <s:layout>
        <s:HorizontalLayout verticalAlign="middle"/>
    </s:layout>

    <s:Label maxDisplayedLines="1"
             maxWidth="350"
             paddingLeft="10"
             showTruncationTip="true"
             text="{label}"/>

    <s:Spacer width="100%"/>

    <s:Group id="moveUpButton"
             alpha="{isHovered ? 1 : 0.3}"
             buttonMode="true"
             click="(owner as IModifyItemDispatcher).dispatchMoveItemUp(data)"
             includeIn="atMiddle,atBottom"
             rollOut="{moveUpButton.filters = []}"
             rollOver="{moveUpButton.filters = [glowFilter]}"
             toolTip="{resourceManager.getString('BuilderStrings', 'moveUp')}">
        <graphics:small_up_arrow width="20" height="10"/>
    </s:Group>

    <s:Group id="moveDownButton"
             alpha="{isHovered ? 1 : 0.3}"
             buttonMode="true"
             click="(owner as IModifyItemDispatcher).dispatchMoveItemDown(data)"
             includeIn="atMiddle,atTop"
             rollOut="{moveDownButton.filters = []}"
             rollOver="{moveDownButton.filters = [glowFilter]}"
             toolTip="{resourceManager.getString('BuilderStrings', 'moveDown')}">
        <graphics:small_down_arrow width="20" height="10"/>
    </s:Group>

    <s:Group id="editButton"
             alpha="{isHovered ? 1 : 0.3}"
             buttonMode="true"
             click="(owner as IModifyItemDispatcher).dispatchEditItem(data)"
             rollOut="{editButton.filters = []}"
             rollOver="{editButton.filters = [glowFilter]}"
             toolTip="{resourceManager.getString('BuilderStrings', 'edit')}">
        <graphics:pencil width="20" height="20"/>
    </s:Group>

    <s:Group id="deleteButton"
             alpha="{isHovered ? 1 : 0.3}"
             buttonMode="true"
             click="(owner as IModifyItemDispatcher).dispatchRemoveItem(data)"
             rollOut="{deleteButton.filters = []}"
             rollOver="{deleteButton.filters = [glowFilter]}"
             toolTip="{resourceManager.getString('BuilderStrings', 'remove')}">
        <graphics:red_x width="25" height="25"/>
    </s:Group>
</s:ItemRenderer>
