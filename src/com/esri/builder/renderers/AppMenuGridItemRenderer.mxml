<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:views="com.esri.builder.views.*"
                    xmlns:graphics="assets.graphics.*"
                    clipAndEnableScrolling="true"
                    creationComplete="init()">
    <fx:Script>
        <![CDATA[
            import com.esri.builder.eventbus.AppEvent;
            import com.esri.builder.model.Model;
            import com.esri.builder.model.ViewerApp;

            import mx.core.FlexGlobals;

            import spark.components.supportClasses.DropDownController;
            import spark.events.DropDownEvent;

            private var viewerApp:ViewerApp;
            private var dropDownController:DropDownController;

            override public function prepare(hasBeenRecycled:Boolean):void
            {
                setRendererState();
            }

            private function setRendererState():void
            {
                if (!viewerApp)
                {
                    return;
                }

                if (viewerApp.version == Model.SUPPORTED_VIEWER_VERSION)
                {
                    currentState = "editableApp";
                }
                else if (viewerApp.version < Model.SUPPORTED_VIEWER_VERSION)
                {
                    currentState = "upgradeableApp";
                }
                else
                {
                    currentState = "unsupportedApp";
                }
            }

            override public function set data(value:Object):void
            {
                viewerApp = value as ViewerApp;
                setRendererState();
            }

            private function init():void
            {
                dropDownController = new DropDownController();
                dropDownController.openButton = menuButton;
                dropDownController.dropDown = appItemMenu;
                dropDownController.addEventListener(DropDownEvent.CLOSE, dropDownChangeHandler, false, 0, true);
                dropDownController.addEventListener(DropDownEvent.OPEN, dropDownChangeHandler, false, 0, true);
            }

            private function dropDownChangeHandler(event:DropDownEvent):void
            {
                dispatchEvent(new Event("isOpenChanged"));
                if (event.type == DropDownEvent.OPEN)
                {
                    updateMenuPosition();
                }
            }

            private function updateMenuPosition():void
            {
                var appDisplay:DisplayObject = (FlexGlobals.topLevelApplication as DisplayObject);
                var menuButtonCenterX:Number = menuButton.x + (menuButton.width >> 1);
                var menuButtonCenterY:Number = menuButton.y + (menuButton.height >> 1) + 3;
                //TODO: better way of handling positioning based on locale
                if (layoutDirection == 'ltr')
                {
                    menuButtonCenterX -= appItemMenu.width;
                }
                var menuGlobalButtonCenter:Point = localToGlobal(new Point(menuButtonCenterX, menuButtonCenterY));
                appItemMenu.x = menuGlobalButtonCenter.x;
                appItemMenu.y = menuGlobalButtonCenter.y;

                var menuBottomY:Number = appItemMenu.y + appItemMenu.height;
                if (menuBottomY > appDisplay.height)
                {
                    appItemMenu.y -= (menuBottomY - appDisplay.height);
                }
            }

            private function dispatchApplicationSelected():void
            {
                AppEvent.dispatch(AppEvent.APP_SELECTED);
            }

            [Bindable(event="isOpenChanged")]
            private function get isOpen():Boolean
            {
                return dropDownController.isOpen;
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="editableApp"/>
        <s:State name="upgradeableApp"/>
        <s:State name="unsupportedApp"/>
    </s:states>

    <fx:Declarations>
        <s:GlowFilter id="glowFilter"
                      blurX="5"
                      blurY="5"
                      color="0x000000"/>
    </fx:Declarations>

    <s:layout>
        <s:HorizontalLayout gap="0"
                            horizontalAlign="center"
                            paddingLeft="5"
                            paddingRight="5"
                            verticalAlign="middle"/>
    </s:layout>

    <s:Group id="editAppOption"
             buttonMode="true"
             click="dispatchApplicationSelected()"
             rollOut="{editAppOption.filters = []}"
             rollOver="{editAppOption.filters = [glowFilter]}"
             toolTip.editableApp="{resourceManager.getString('BuilderStrings', 'appItemMenu.edit')}"
             toolTip.unsupportedApp="{resourceManager.getString('BuilderStrings','unsupportedViewer')}"
             toolTip.upgradeableApp="{resourceManager.getString('BuilderStrings', 'appItemMenu.upgrade')}">
        <graphics:pencil width="20" height="20"
                         horizontalCenter="0"
                         includeIn="editableApp"
                         verticalCenter="0"/>

        <s:BitmapImage width="20" height="20"
                       horizontalCenter="0"
                       includeIn="upgradeableApp"
                       source="@Embed(source='/assets/images/upgrade.png')"
                       verticalCenter="0"/>

        <graphics:warning width="20" height="20"
                          horizontalCenter="0"
                          includeIn="unsupportedApp"
                          verticalCenter="0"/>
    </s:Group>

    <s:Button id="menuButton" skinClass="com.esri.builder.skins.SmallDropDownButtonSkin"/>

    <s:PopUpAnchor x="{menuButton.x}" y="{menuButton.y}"
                   displayPopUp="{isOpen}">
        <views:AppItemMenu id="appItemMenu"/>
    </s:PopUpAnchor>
</s:GridItemRenderer>
