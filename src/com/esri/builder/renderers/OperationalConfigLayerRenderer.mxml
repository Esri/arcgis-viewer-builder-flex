<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:graphics="assets.graphics.*"
                width="100%" height="50"
                autoDrawBackground="false"
                doubleClick="this_doubleClickHandler(event)"
                doubleClickEnabled="true">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.events.LayerEvent;
            import com.esri.ags.layers.Layer;
            import com.esri.builder.eventbus.AppEvent;
            import com.esri.builder.model.ConfigLayer;
            import com.esri.builder.model.Model;
            import com.esri.builder.views.ConfigLayerView;

            import mx.core.FlexGlobals;

            import spark.components.List;
            import spark.events.PopUpEvent;

            [Bindable]
            private var configLayer:ConfigLayer;
            [Bindable]
            private var isLayerTypeSupported:Boolean;

            private var layerConfigPopUp:ConfigLayerView;

            override public function set data(value:Object):void
            {
                super.data = value;
                configLayer = data as ConfigLayer;
                if (configLayer)
                {
                    moveUpButton.visible = moveUpButton.includeInLayout = itemIndex > 0;
                    moveDownButton.visible = moveDownButton.includeInLayout = itemIndex < List(this.owner).dataProvider.length - 1;
                }

                isLayerTypeSupported = configLayer && configLayer.isLayerSupported;
            }

            private function moveUpButton_clickHandler(event:MouseEvent):void
            {
                if (configLayer)
                {
                    Model.instance.configOpsLayerList.moveLayerUp(configLayer);
                    syncConfigMap();
                }
            }

            private function moveDownButton_clickHandler(event:MouseEvent):void
            {
                if (configLayer)
                {
                    Model.instance.configOpsLayerList.moveLayerDown(configLayer);
                    syncConfigMap();
                }
            }

            private function editButton_clickHandler(event:MouseEvent):void
            {
                editConfigLayer();
            }

            private function editConfigLayer():void
            {
                if (configLayer)
                {
                    AppEvent.dispatch(AppEvent.EDIT_CONFIG_LAYER, configLayer);
                    var layer:Layer = configLayer.createLayer();
                    if (layer)
                    {
                        switch (configLayer.type)
                        {
                            case ConfigLayer.BING:
                            case ConfigLayer.CSV:
                            case ConfigLayer.KML:
                            case ConfigLayer.GEO_RSS:
                            case ConfigLayer.OSM:
                            case ConfigLayer.WMS:
                            case ConfigLayer.WMTS:
                            case ConfigLayer.WEB_TILED:
                            {
                                // dont wait for layer load
                                if (!configPopUpOpen)
                                {
                                    showLayerConfigPopUp(layer);
                                }
                                break;
                            }
                            default:
                            {
                                layer.addEventListener(LayerEvent.LOAD, layer_loadHandler);
                            }
                        }
                    }
                }
            }

            private function layer_loadHandler(event:LayerEvent):void
            {
                event.layer.removeEventListener(LayerEvent.LOAD, layer_loadHandler);
                if (!configPopUpOpen)
                {
                    showLayerConfigPopUp(event.layer);
                }
            }

            private function get configPopUpOpen():Boolean
            {
                return layerConfigPopUp && layerConfigPopUp.isPopUp;
            }

            private function showLayerConfigPopUp(layer:Layer):void
            {
                layerConfigPopUp = new ConfigLayerView();
                layerConfigPopUp.enableVisibilityOption = true;
                layerConfigPopUp.layer = layer;
                layerConfigPopUp.addEventListener(PopUpEvent.CLOSE, layerConfigPopUp_closeHandler, false, 0, true);
                layerConfigPopUp.open(FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
            }

            private function layerConfigPopUp_closeHandler(event:PopUpEvent):void
            {
                layerConfigPopUp.removeEventListener(PopUpEvent.CLOSE, layerConfigPopUp_closeHandler);
                layerConfigPopUp = null;
            }

            private function deleteButton_clickHandler(event:MouseEvent):void
            {
                if (configLayer)
                {
                    Model.instance.configOpsLayerList.removeLayer(configLayer);
                    syncConfigMap();
                }
            }

            private function syncConfigMap():void
            {
                Model.instance.config.isDirty = true;
                Model.instance.config.configMap.operationalLayers.importLayers(
                    Model.instance.configOpsLayerList.getAllLayers());
            }

            protected function this_doubleClickHandler(event:MouseEvent):void
            {
                if (event.currentTarget == moveUpButton
                    || event.currentTarget == moveDownButton
                    || event.currentTarget == editButton
                    || event.currentTarget == deleteButton)
                {
                    return;
                }

                editConfigLayer();
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <s:GlowFilter id="glowFilter"
                      blurX="5"
                      blurY="5"
                      color="0x000000"/>
    </fx:Declarations>

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered" stateGroups="hoveredSelected"/>
        <s:State name="selected" stateGroups="hoveredSelected"/>
    </s:states>

    <s:Rect left="2" right="2" top="2" bottom="2">
        <s:fill>
            <s:SolidColor color="0xFFFFFF"/>
        </s:fill>
    </s:Rect>

    <s:HGroup width="100%" height="100%"
              paddingLeft="10"
              paddingRight="10"
              verticalAlign="middle">
        <s:VGroup width="20" height="100%"
                  verticalAlign="middle">
            <s:Group id="moveUpButton"
                     buttonMode="true"
                     click="moveUpButton_clickHandler(event)"
                     rollOut="{moveUpButton.filters = []}"
                     rollOver="{moveUpButton.filters = [glowFilter]}"
                     toolTip="{resourceManager.getString('BuilderStrings', 'mapsView.moveLayerUpTooltip')}">
                <graphics:small_up_arrow width="20" height="10"/>
            </s:Group>

            <s:Group id="moveDownButton"
                     buttonMode="true"
                     click="moveDownButton_clickHandler(event)"
                     rollOut="{moveDownButton.filters = []}"
                     rollOver="{moveDownButton.filters = [glowFilter]}"
                     toolTip="{resourceManager.getString('BuilderStrings', 'mapsView.moveLayerDownTooltip')}">
                <graphics:small_down_arrow width="20" height="10"/>
            </s:Group>
        </s:VGroup>

        <s:VGroup width="100%"
                  horizontalAlign="left"
                  paddingRight="5"
                  toolTip="{configLayer.url}"
                  verticalAlign="middle">
            <s:Label width="100%"
                     fontSize="14"
                     fontWeight="bold"
                     maxDisplayedLines="1"
                     text="{configLayer.label}"
                     textAlign="left"/>

            <s:Label alpha="0.5"
                     text="{configLayer.prettyType}"
                     textAlign="left"/>
        </s:VGroup>

        <s:Group id="editButton" toolTip="{isLayerTypeSupported ? 
                 resourceManager.getString('BuilderStrings', 'mapsView.editLayerTooltip')
                 : resourceManager.getString('BuilderStrings', 'unsupportedLayer')}">
            <s:Group buttonMode="true"
                     click="editButton_clickHandler(event)"
                     enabled="{isLayerTypeSupported}"
                     rollOut="{editButton.filters = []}"
                     rollOver="{editButton.filters = [glowFilter]}">
                <graphics:pencil width="20" height="20"/>
            </s:Group>
        </s:Group>

        <s:Group id="deleteButton"
                 buttonMode="true"
                 click="deleteButton_clickHandler(event)"
                 rollOut="{deleteButton.filters = []}"
                 rollOver="{deleteButton.filters = [glowFilter]}"
                 toolTip="{resourceManager.getString('BuilderStrings', 'mapsView.deleteLayerTooltip')}">
            <graphics:red_x width="25" height="25"/>
        </s:Group>
    </s:HGroup>
</s:ItemRenderer>
