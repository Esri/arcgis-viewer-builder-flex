<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:graphics="assets.graphics.*"
                width="100"
                autoDrawBackground="false">
    <fx:Script>
        <![CDATA[
            import com.esri.builder.eventbus.AppEvent;
            import com.esri.builder.model.WidgetGroup;

            override public function set data(value:Object):void
            {
                super.data = value;
                const widgetGroup:WidgetGroup = value as WidgetGroup;
                if (widgetGroup)
                {
                    displayImage.source = widgetGroup.iconFile.url;
                    displayLabel.text = widgetGroup.label;
                }
            }

            private function dispatchDeleteWidgetGroup():void
            {
                AppEvent.dispatch(AppEvent.DELETE_WIDGET, data);
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <s:GlowFilter id="glowFilter"
                      blurX="5"
                      blurY="5"
                      color="0x000000"/>
    </fx:Declarations>

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
    </s:states>

    <s:transitions>
        <s:Transition autoReverse="true">
            <s:Fade duration="150" target="{deleteOption}"/>
        </s:Transition>
    </s:transitions>

    <s:layout>
        <s:VerticalLayout horizontalAlign="center"
                          paddingBottom="10"
                          paddingTop="10"/>
    </s:layout>

    <s:Image id="displayImage"
             width="40" height="40"
             smooth="true"/>

    <s:Line width="100%">
        <s:stroke>
            <s:SolidColorStroke color="0xCCCCCC" weight="1"/>
        </s:stroke>
    </s:Line>

    <s:Label id="displayLabel"
             maxDisplayedLines="2"
             maxWidth="90"
             minHeight="25"
             showTruncationTip="true"
             verticalAlign="middle"/>

    <s:Group id="deleteOption"
             buttonMode="true"
             click="dispatchDeleteWidgetGroup()"
             rollOut="{deleteOption.filters = []}"
             rollOver="{deleteOption.filters = [glowFilter]}"
             toolTip="{resourceManager.getString('BuilderStrings', 'widgetsView.delete')}">
        <graphics:red_x width="25" height="25"/>
    </s:Group>
</s:ItemRenderer>
