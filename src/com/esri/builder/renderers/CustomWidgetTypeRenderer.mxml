<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:graphics="assets.graphics.*"
                width="100%" height="50"
                autoDrawBackground="false">
    <fx:Script>
        <![CDATA[
            import com.esri.builder.controllers.supportClasses.WellKnownDirectories;
            import com.esri.builder.model.WidgetType;
            import com.esri.builder.views.supportClasses.CustomWidgetCatalog;

            private var widgetType:WidgetType;

            [Bindable]
            private var hasWidgetVersion:Boolean;

            private var _widgetVersion:String;

            [Bindable]
            public function get widgetVersion():String
            {
                return _widgetVersion;
            }

            public function set widgetVersion(value:String):void
            {
                _widgetVersion = value;
                hasWidgetVersion = Boolean(value);
            }

            override public function set data(value:Object):void
            {
                super.data = value;

                widgetType = value as WidgetType;
                if (widgetType)
                {
                    if (widgetType.isCustom)
                    {
                        //TODO: REFACTOR
                        //Look for icon in custom viewer, then in bundled viewer
                        var customWidgetIcon:File = WellKnownDirectories.getInstance().customFlexViewer.resolvePath(widgetType.iconLocation);
                        if (customWidgetIcon.exists)
                        {
                            displayImage.source = customWidgetIcon.url;
                        }
                        else
                        {
                            customWidgetIcon = WellKnownDirectories.getInstance().bundledFlexViewer.resolvePath(widgetType.iconLocation);
                            displayImage.source = customWidgetIcon.url;
                        }
                    }
                    else
                    {
                        displayImage.source = WellKnownDirectories.getInstance().bundledFlexViewer.resolvePath(widgetType.iconLocation).url;
                    }
                    displayImage.toolTip = widgetType.description;
                    displayLabel.text = widgetType.label;
                    displayLabel.toolTip = widgetType.description;
                    widgetVersion = widgetType.version;
                }
            }

            private function dispatchDeleteWidget():void
            {
                (owner as CustomWidgetCatalog).dispatchRemoveWidgetType(widgetType);
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <s:GlowFilter id="glowFilter"
                      blurX="5"
                      blurY="5"
                      color="0x000000"/>
    </fx:Declarations>

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered" stateGroups="hoveredSelected"/>
        <s:State name="selected" stateGroups="hoveredSelected"/>
    </s:states>

    <s:Rect left="2" right="2" top="2" bottom="2">
        <s:stroke>
            <s:SolidColorStroke color="0xBABABA"
                                color.selected="0x8F8F8F"
                                weight.hoveredSelected="2"/>
        </s:stroke>
    </s:Rect>

    <s:Image id="displayImage"
             width="40" height="40"
             left="10"
             smooth="true"
             verticalCenter="0"/>

    <s:VGroup left="60" right="15" top="5" bottom="5"
              verticalAlign="middle">
        <s:Label id="displayLabel"
                 maxDisplayedLines="1"
                 maxWidth="250"
                 showTruncationTip="true"
                 verticalCenter="-2"/>

        <s:Label includeInLayout="{hasWidgetVersion}"
                 maxDisplayedLines="1"
                 maxWidth="250"
                 showTruncationTip="true"
                 text="{widgetVersion}"
                 verticalCenter="15"
                 visible="{hasWidgetVersion}"/>
    </s:VGroup>

    <s:Group id="deleteOption"
             right="10"
             buttonMode="true"
             click="dispatchDeleteWidget()"
             rollOut="{deleteOption.filters = []}"
             rollOver="{deleteOption.filters = [glowFilter]}"
             toolTip="{resourceManager.getString('BuilderStrings', 'remove')}"
             verticalCenter="0">
        <graphics:red_x width="25" height="25"/>
    </s:Group>
</s:ItemRenderer>
