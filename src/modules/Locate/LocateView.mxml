<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:graphics="assets.graphics.*"
         xmlns:components="com.esri.builder.components.*"
         width="100%" height="100%"
         implements="modules.IWidgetView">
    <fx:Script>
        <![CDATA[
            import com.esri.builder.components.serviceBrowser.nodes.GeocodeServerNode;
            import com.esri.builder.components.serviceBrowser.supportClasses.ServiceBrowserEvent;
            import com.esri.builder.model.Model;
            import com.esri.builder.model.RecentlyUsedURLsModel;
            import com.esri.builder.supportClasses.URLUtil;

            import modules.IWidgetModel;

            [Bindable]
            private var locateModel:LocateModel;

            public function set widgetModel(value:IWidgetModel):void
            {
                if (value is LocateModel)
                {
                    locateModel = value as LocateModel;
                }
                else
                {
                    throw new Error('argument is not an instance of LocateModel');
                }
            }

            public function get widgetModel():IWidgetModel
            {
                return locateModel;
            }

            public function submit():Boolean
            {
                if (locateModel.locator.match(/^\s*$/))
                {
                    Model.instance.status = resourceManager.getString('BuilderStrings', 'locate.missingLocator');
                    return false;
                }
                Model.instance.status = '';
                return true;
            }

            public function cancel():void
            {
                Model.instance.status = '';
            }

            protected function serviceBrowser_selectionChangeHandler(event:ServiceBrowserEvent):void
            {
                if (event.hasValidSelection)
                {
                    const selectedGeocodeServer:GeocodeServerNode = serviceBrowser.serviceSelection.getItemAt(0) as GeocodeServerNode;
                    locateModel.locator = selectedGeocodeServer.url;
                    currentState = "normal";
                }
            }

            protected function backButton_clickHandler(event:MouseEvent):void
            {
                currentState = "normal";
            }

            private function browseForLocatorsIfNeeded():void
            {
                if (!hasGeocodeServerEndPoint())
                {
                    browseForLocators();
                }
            }

            private function browseForLocators():void
            {
                currentState = "browsingLocators";
                serviceBrowser.browseService();
            }

            private function hasGeocodeServerEndPoint():Boolean
            {
                const endsWithGeocodeServer:RegExp = / \/ GeocodeServer \/? $ /ix;
                return endsWithGeocodeServer.test(URLUtil.removeQueryString(locateModel.locator));
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="browsingLocators"/>
    </s:states>

    <s:Form width="100%" height="100%"
            includeIn="normal">
        <s:FormItem label="{resourceManager.getString('BuilderStrings', 'locate.locator')}" toolTip="{resourceManager.getString('BuilderStrings', 'locate.locatorToolTip')}">
            <components:SearchInput width="100%"
                                    direction="ltr"
                                    search="browseForLocatorsIfNeeded()"
                                    searchButtonLabel="{resourceManager.getString('BuilderStrings', 'serviceBrowser.browse')}"
                                    searchButtonToolTip="{resourceManager.getString('BuilderStrings', 'serviceBrowser.browseTooltip')}"
                                    searchHistory="{RecentlyUsedURLsModel.getInstance().urls}"
                                    searchTextInputToolTip="{resourceManager.getString('BuilderStrings', 'serviceBrowser.urlTooltip')}"
                                    text="@{locateModel.locator}"/>
        </s:FormItem>

        <s:FormItem label="{resourceManager.getString('BuilderStrings', 'locate.useSearchExtent')}" toolTip="{resourceManager.getString('BuilderStrings', 'locate.useSearchExtentToolTip')}">
            <s:CheckBox selected="@{locateModel.useSearchExtent}"/>
        </s:FormItem>

        <s:FormItem label="{resourceManager.getString('BuilderStrings', 'locate.minScore')}" toolTip="{resourceManager.getString('BuilderStrings', 'locate.minScoreToolTip')}">
            <s:layout>
                <s:HorizontalLayout verticalAlign="middle"/>
            </s:layout>

            <s:Label text="0%"/>

            <s:HSlider width="200"
                       maximum="100"
                       minimum="0"
                       stepSize="1"
                       value="@{locateModel.minScore}"/>

            <s:Label text="100%"/>

            <s:NumericStepper maximum="100"
                              minimum="0"
                              value="@{locateModel.minScore}"/>

            <s:Label text="%"/>
        </s:FormItem>

        <s:FormItem label="{resourceManager.getString('BuilderStrings', 'locate.zoomScale')}" toolTip="{resourceManager.getString('BuilderStrings', 'locate.zoomScaleToolTip')}">
            <s:layout>
                <s:HorizontalLayout verticalAlign="middle"/>
            </s:layout>

            <s:Label text="1:"/>

            <s:TextInput width="200"
                         restrict="0-9"
                         text="@{locateModel.zoomScale}"/>
        </s:FormItem>

        <s:FormItem label="{resourceManager.getString('BuilderStrings', 'configLayerView.useProxy')}">
            <s:layout>
                <s:HorizontalLayout verticalAlign="middle"/>
            </s:layout>

            <s:CheckBox id="useProxy" selected="@{locateModel.useProxy}"/>

            <graphics:warning width="20" height="20"
                              visible="{useProxy.selected
                              &amp;&amp; !Model.instance.proxyURL}"/>

            <s:Label text="{resourceManager.getString('BuilderStrings', 'httpProxyMissing')}" visible="{useProxy.selected
                 &amp;&amp; !Model.instance.proxyURL}"/>
        </s:FormItem>
    </s:Form>

    <s:VGroup width="100%" height="100%"
              horizontalAlign="right"
              includeIn="browsingLocators">
        <components:ServiceBrowser id="serviceBrowser"
                                   width="100%" height="100%"
                                   searchType="locators"
                                   selectionChange="serviceBrowser_selectionChangeHandler(event)"
                                   serviceURL="{locateModel.locator}"/>

        <s:HGroup width="100%" verticalAlign="middle">
            <s:Button click="backButton_clickHandler(event)"
                      label="{resourceManager.getString('BuilderStrings', 'query.goBack')}"
                      skinClass="com.esri.builder.skins.LinkButtonSkin"/>
        </s:HGroup>
    </s:VGroup>
</s:Group>
