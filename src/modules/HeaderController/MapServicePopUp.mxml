<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                           xmlns:s="library://ns.adobe.com/flex/spark"
                           xmlns:mx="library://ns.adobe.com/flex/mx"
                           xmlns:components="com.esri.builder.components.*"
                           creationComplete="this_creationCompleteHandler(event)"
                           minHeight="85"
                           minWidth="250"
                           stateChangeComplete="updatePopUpPosition()">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.layers.supportClasses.AllDetails;
            import com.esri.ags.layers.supportClasses.Field;
            import com.esri.ags.layers.supportClasses.LayerDetails;
            import com.esri.ags.tasks.DetailsTask;
            import com.esri.builder.components.serviceBrowser.nodes.MapServerNode;
            import com.esri.builder.components.serviceBrowser.supportClasses.ServiceBrowserEvent;
            import com.esri.builder.eventbus.AppEvent;
            import com.esri.builder.model.RecentlyUsedURLsModel;
            import com.esri.builder.supportClasses.FieldUtil;
            import com.esri.builder.supportClasses.URLUtil;

            import mx.collections.ArrayList;
            import mx.events.CollectionEvent;
            import mx.events.CollectionEventKind;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;
            import mx.rpc.AsyncResponder;
            import mx.rpc.Fault;

            private var originalMapService:MapService;
            private var lastState:String;

            [Bindable]
            private var mapServiceURL:String;
            [Bindable]
            private var availableFieldItems:ArrayList = new ArrayList();
            [Bindable]
            private var availableLayerItems:ArrayList = new ArrayList();

            protected function this_creationCompleteHandler(event:FlexEvent):void
            {
                availableFieldItems.addEventListener(CollectionEvent.COLLECTION_CHANGE, availableItems_collectionChangeHandler);
                availableLayerItems.addEventListener(CollectionEvent.COLLECTION_CHANGE, availableItems_collectionChangeHandler);
            }

            protected function availableItems_collectionChangeHandler(event:CollectionEvent):void
            {
                if (event.kind == CollectionEventKind.UPDATE
                    || event.kind == CollectionEventKind.REFRESH
                    || event.kind == CollectionEventKind.RESET)
                {
                    dispatchEvent(new Event("itemInclusionChanged"));
                }
            }

            [Bindable(event="itemInclusionChanged")]
            private function get hasValidMapServiceOptions():Boolean
            {
                return hasAtLeastOneSelectedItem(availableFieldItems.source)
                    && hasAtLeastOneSelectedItem(availableLayerItems.source);
            }

            private function hasAtLeastOneSelectedItem(items:Array):Boolean
            {
                for each (var item:Object in items)
                {
                    if (item.selected === true)
                    {
                        return true;
                    }
                }

                return false;
            }

            public function overrideMapService(mapService:MapService):void
            {
                this.originalMapService = mapService;
                mapServiceURL = originalMapService.url;
                getAllDetails();
            }

            private function browseForMapServicesIfNeeded():void
            {
                if (hasMapServerEndPoint())
                {
                    getAllDetails();
                }
                else
                {
                    currentState = "browsingServices";
                    serviceBrowser.browseService();
                }
            }

            private function hasMapServerEndPoint():Boolean
            {
                const endsWithMapServer:RegExp = / \/ MapServer \/? $ /ix;
                return endsWithMapServer.test(mapServiceURL);
            }

            private function getAllDetails():void
            {
                var detailsTask:DetailsTask = new DetailsTask(URLUtil.removeToken(mapServiceURL));
                detailsTask.getAllDetails(
                    new AsyncResponder(detailsTask_getAllDetailsResultHandler,
                                       detailsTask_getAllDetailsFaultHandler));
            }

            private function detailsTask_getAllDetailsResultHandler(details:AllDetails, token:Object = null):void
            {
                setOptions(details.layersDetails);
            }

            private function detailsTask_getAllDetailsFaultHandler(fault:Fault, token:Object = null):void
            {
                AppEvent.dispatch(AppEvent.SHOW_ERROR, resourceManager.getString('BuilderStrings', 'headerController.couldNotLoadMapServiceInfo'));
                resetOptions();
            }

            private function setOptions(allLayerDetails:Array):void
            {
                if (!allLayerDetails)
                {
                    return;
                }

                var fields:Array = [];
                var layers:Array = [];
                var isGroupLayer:Boolean;
                var filteredFields:Array;
                var addedFieldNames:Dictionary = new Dictionary();
                for each (var layerDetails:LayerDetails in allLayerDetails)
                {
                    isGroupLayer = layerDetails.subLayers == null;
                    if (!isGroupLayer)
                    {
                        filteredFields = FieldUtil.getValidFields(layerDetails.fields);
                        for each (var field:Field in filteredFields)
                        {
                            if (!addedFieldNames[field.name])
                            {
                                addedFieldNames[field.name] = true;
                                fields.push({ id: field.name, name: field.alias, selected: true });
                            }
                        }

                        layers.push({ id: layerDetails.id, name: layerDetails.name, selected: false });
                    }
                }

                if (originalMapService)
                {
                    var atLeastOneFieldMatched:Boolean = false;
                    var definedFieldNames:Dictionary = new Dictionary();
                    var fieldItem:Object
                    for each (var fieldName:String in originalMapService.searchFields.toArray())
                    {
                        if (!definedFieldNames[fieldName])
                        {
                            definedFieldNames[fieldName] = true;
                        }

                        for each (fieldItem in fields)
                        {
                            if (fieldItem.id == fieldName)
                            {
                                fieldItem.selected = true;
                                atLeastOneFieldMatched = true;
                            }
                        }
                    }

                    if (atLeastOneFieldMatched)
                    {
                        //deselect non-defined fields
                        for each (fieldItem in fields)
                        {
                            if (!definedFieldNames[fieldItem.id])
                            {
                                fieldItem.selected = false;
                            }
                        }
                    }

                    var atLeastOneLayerIdMatched:Boolean;
                    for each (var layerId:String in originalMapService.layerIds.toArray())
                    {
                        for each (var layerItem:Object in layers)
                        {
                            if (layerItem.id == layerId)
                            {
                                layerItem.selected = true;
                                atLeastOneLayerIdMatched = true;
                            }
                        }
                    }

                    if (!atLeastOneLayerIdMatched)
                    {
                        if (layers.length > 0)
                        {
                            layers[0].selected = true;
                        }
                    }
                }
                else
                {
                    if (layers.length > 0)
                    {
                        layers[0].selected = true;
                    }
                }

                availableFieldItems.source = fields;
                availableLayerItems.source = layers;

                currentState = "hasValidServiceInfo";
                updatePopUpPosition();
            }

            private function resetOptions():void
            {
                availableFieldItems.removeAll();
                availableLayerItems.removeAll();
                currentState = "hasInvalidServiceInfo";
                updatePopUpPosition();
            }

            private function commitAndClose():void
            {
                var mapService:MapService = new MapService();
                mapService.url = mapServiceURL;
                mapService.searchFields.source = getSelectedSearchFields();
                mapService.layerIds.source = getSelectedLayerIds();

                if (originalMapService)
                {
                    close(true, { originalMapService: originalMapService, mapService: mapService });
                }
                else
                {
                    close(true, mapService);
                }
            }

            override public function close(commit:Boolean = false, data:* = null):void
            {
                availableFieldItems.removeEventListener(CollectionEvent.COLLECTION_CHANGE, availableItems_collectionChangeHandler);
                availableLayerItems.removeEventListener(CollectionEvent.COLLECTION_CHANGE, availableItems_collectionChangeHandler);
                super.close(commit, data);
            }

            override public function updatePopUpPosition():void
            {
                PopUpManager.centerPopUp(this);
            }

            private function getSelectedSearchFields():Array
            {
                var searchFields:Array = [];

                var fieldItems:Array = availableFieldItems.source;
                for each (var inclusionItem:Object in fieldItems)
                {
                    if (inclusionItem.selected)
                    {
                        searchFields.push(inclusionItem.id);
                    }
                }

                return searchFields;
            }

            private function getSelectedLayerIds():Array
            {
                var layerIds:Array = [];

                var layerItems:Array = availableLayerItems.source;
                for each (var inclusionItem:Object in layerItems)
                {
                    if (inclusionItem.selected)
                    {
                        layerIds.push(inclusionItem.id);
                    }
                }

                return layerIds;
            }

            protected function serviceBrowser_selectionChangeHandler(event:ServiceBrowserEvent):void
            {
                if (event.hasValidSelection)
                {
                    const selectedGeocodeServer:MapServerNode = serviceBrowser.serviceSelection.getItemAt(0) as MapServerNode;
                    mapServiceURL = selectedGeocodeServer.url;
                    currentState = lastState;
                    getAllDetails();
                }
            }

            protected function backButton_clickHandler(event:MouseEvent):void
            {
                currentState = lastState;
            }

            override public function set currentState(value:String):void
            {
                lastState = super.currentState;
                super.currentState = value;
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="hasInvalidServiceInfo"/>
        <s:State name="hasValidServiceInfo"/>
        <s:State name="browsingServices"/>
    </s:states>

    <!--background-->
    <s:Rect left="0" right="0" top="0" bottom="0">
        <s:fill>
            <s:SolidColor color="#FFFFFF"/>
        </s:fill>
        <s:stroke>
            <s:SolidColorStroke caps="none"
                                color="#000000"
                                joints="miter"
                                miterLimit="4"
                                weight="2"/>
        </s:stroke>
    </s:Rect>

    <s:Rect height="25"
            left="2" right="2" top="2">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry alpha="1"
                                 color="#FFFFFF"
                                 ratio="0"/>
                <s:GradientEntry alpha="1.0"
                                 color="#CCCCCC"
                                 ratio="1"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>

    <s:Line left="0" right="0" top="26">
        <s:stroke>
            <s:SolidColorStroke caps="none"
                                color="#000000"
                                joints="miter"
                                miterLimit="4"
                                weight="2"/>
        </s:stroke>
    </s:Line>

    <!--content-->
    <s:Label left="10" top="9"
             color="#000000"
             fontSize="14"
             styleName="boldText"
             text="{resourceManager.getString('BuilderStrings', 'headerController.mapServiceProperties')}"
             textAlign="center"
             verticalAlign="middle"/>

    <s:Form top="20" excludeFrom="browsingServices">
        <s:layout>
            <s:FormLayout gap="-10"/>
        </s:layout>

        <s:FormItem label="{resourceManager.getString('BuilderStrings', 'headerController.url')}">
            <components:SearchInput width="400"
                                    direction="ltr"
                                    search="browseForMapServicesIfNeeded()"
                                    searchButtonLabel="{resourceManager.getString('BuilderStrings', 'serviceBrowser.browse')}"
                                    searchButtonToolTip="{resourceManager.getString('BuilderStrings', 'serviceBrowser.browseTooltip')}"
                                    searchHistory="{RecentlyUsedURLsModel.getInstance().urls}"
                                    searchTextInputToolTip="{resourceManager.getString('BuilderStrings', 'serviceBrowser.urlTooltip')}"
                                    text="@{mapServiceURL}"/>
        </s:FormItem>

        <s:FormItem label="{resourceManager.getString('BuilderStrings', 'edit.layers')}">
            <s:Label includeIn="hasInvalidServiceInfo" text="{resourceManager.getString('BuilderStrings', 'time.noLayersAvailable')}"/>

            <s:DataGrid width="100%" height="100"
                        dataProvider="{availableLayerItems}"
                        includeIn="hasValidServiceInfo">
                <s:columns>
                    <s:ArrayList>
                        <s:GridColumn width="60"
                                      dataField="selected"
                                      editable="false"
                                      headerRenderer="com.esri.builder.renderers.CheckBoxGridHeaderRenderer"
                                      headerText="{resourceManager.getString('BuilderStrings', 'include')}"
                                      itemRenderer="com.esri.builder.renderers.CheckBoxGridItemRenderer"/>

                        <s:GridColumn dataField="name" headerText="{resourceManager.getString('BuilderStrings', 'displayFields.name')}"/>
                    </s:ArrayList>
                </s:columns>
            </s:DataGrid>
        </s:FormItem>

        <s:FormItem label="{resourceManager.getString('BuilderStrings', 'edit.fields')}">
            <s:Label includeIn="hasInvalidServiceInfo" text="{resourceManager.getString('BuilderStrings', 'noFieldsAvailable')}"/>

            <s:DataGrid width="100%" height="100"
                        dataProvider="{availableFieldItems}"
                        includeIn="hasValidServiceInfo">
                <s:columns>
                    <s:ArrayList>
                        <s:GridColumn width="60"
                                      dataField="selected"
                                      editable="false"
                                      headerRenderer="com.esri.builder.renderers.CheckBoxGridHeaderRenderer"
                                      headerText="{resourceManager.getString('BuilderStrings', 'include')}"
                                      itemRenderer="com.esri.builder.renderers.CheckBoxGridItemRenderer"/>

                        <s:GridColumn dataField="name" headerText="{resourceManager.getString('BuilderStrings', 'displayFields.name')}"/>
                    </s:ArrayList>
                </s:columns>
            </s:DataGrid>
        </s:FormItem>

        <s:FormItem>
            <s:layout>
                <s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
            </s:layout>

            <s:Button click="commitAndClose()"
                      enabled.hasInvalidServiceInfo="false"
                      enabled.hasValidServiceInfo="{hasValidMapServiceOptions}"
                      label="{resourceManager.getString('BuilderStrings', 'ok')}"
                      skinClass="com.esri.builder.skins.BlueButtonSkin"/>

            <s:Button click="close(false)"
                      label="{resourceManager.getString('BuilderStrings', 'cancel')}"
                      skinClass="com.esri.builder.skins.LinkButtonSkin"/>
        </s:FormItem>
    </s:Form>

    <s:VGroup width="100%"
              left="15" right="15" top="30" bottom="15"
              horizontalAlign="right"
              includeIn="browsingServices">
        <components:ServiceBrowser id="serviceBrowser"
                                   width="100%" height="100%"
                                   minHeight="250"
                                   minWidth="450"
                                   searchType="mapservers"
                                   selectionChange="serviceBrowser_selectionChangeHandler(event)"
                                   serviceURL="{mapServiceURL}"/>

        <s:HGroup width="100%" verticalAlign="middle">
            <s:Button click="backButton_clickHandler(event)"
                      label="{resourceManager.getString('BuilderStrings', 'query.goBack')}"
                      skinClass="com.esri.builder.skins.LinkButtonSkin"/>
        </s:HGroup>
    </s:VGroup>
</s:SkinnablePopUpContainer>
