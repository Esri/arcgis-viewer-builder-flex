<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:graphics="assets.graphics.*"
          xmlns:components="com.esri.builder.components.*"
          width="100%" height="100%"
          gap="0"
          implements="modules.IWidgetView"
          paddingBottom="10"
          paddingTop="10"
          preinitialize="init()">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.tasks.JSONTask;
            import com.esri.builder.components.ModifyItemEvent;
            import com.esri.builder.components.serviceBrowser.nodes.GeocodeServerNode;
            import com.esri.builder.components.serviceBrowser.supportClasses.ServiceBrowserEvent;
            import com.esri.builder.model.Model;
            import com.esri.builder.model.RecentlyUsedURLsModel;
            import com.esri.builder.views.BuilderAlert;

            import modules.IWidgetModel;

            import mx.controls.Alert;
            import mx.core.FlexGlobals;
            import mx.rpc.AsyncResponder;
            import mx.rpc.Fault;

            import spark.events.PopUpEvent;
            import spark.utils.LabelUtil;

            private static const MIN_VALIDATION_REQUEST_DELAY_IN_MS:Number = 100;

            private var validationRequestTimer:Timer = new Timer(MIN_VALIDATION_REQUEST_DELAY_IN_MS, 1);

            private var lastState:String;

            private var linkPopUp:LinkPropertiesPopUp;

            public function showLinksEditor():void
            {
                currentState = "editingLinks";
            }

            public function showSearchEditor():void
            {
                currentState = "editingSearchNormal";
            }

            [Bindable]
            private var headerControllerModel:HeaderControllerModel;

            [Bindable]
            private var linksDataProvider:ArrayList;

            [Bindable]
            private var hasSupportedSingleLineLocator:Boolean = false;

            [Bindable]
            private var mapServicesDataProvider:ArrayList;

            [Bindable]
            public function get locatorURL():String
            {
                return headerControllerModel.locatorURL;

            }

            public function set locatorURL(value:String):void
            {
                headerControllerModel.locatorURL = value;
                resetLocatorValidationRequest();
            }

            private function init():void
            {
                validationRequestTimer.addEventListener(TimerEvent.TIMER_COMPLETE, validationRequestTimer_timerCompleteHandler, false, 0, true);
            }

            public function get widgetModel():IWidgetModel
            {
                return headerControllerModel;
            }

            public function set widgetModel(value:IWidgetModel):void
            {
                if (value is HeaderControllerModel)
                {
                    headerControllerModel = value as HeaderControllerModel;
                    resetLocatorValidationRequest();
                    linksDataProvider = new ArrayList(headerControllerModel.links);
                    mapServicesDataProvider = new ArrayList(headerControllerModel.mapServices);
                }
                else
                {
                    throw new Error('argument is not an instance of HeaderControllerModel');
                }
            }

            public function submit():Boolean
            {
                if (!locatorURL)
                {
                    BuilderAlert.show(resourceManager.getString('BuilderStrings', 'headerController.missingLocatorURL'),
                                      resourceManager.getString('BuilderStrings', 'widgetsView.widgetConfigurationError'),
                                      Alert.OK);

                    return false;
                }

                return true;
            }

            public function cancel():void
            {
                // NOOP
            }

            private function resetLocatorValidationRequest():void
            {
                if (validationRequestTimer.running)
                {
                    validationRequestTimer.reset();
                }

                validationRequestTimer.start();
            }

            protected function validationRequestTimer_timerCompleteHandler(event:TimerEvent):void
            {
                validateLocator();
            }

            private function validateLocator():void
            {
                var locatorMetadataRequest:JSONTask = new JSONTask(locatorURL);
                var urlVars:URLVariables = new URLVariables();
                urlVars.f = 'json';
                locatorMetadataRequest.execute(urlVars, new AsyncResponder(locatorMetadataRequest_resultHandler, locatorMetadataRequest_faultHandler));
            }

            private function locatorMetadataRequest_resultHandler(locatorMetadata:Object, token:Object = null):void
            {
                hasSupportedSingleLineLocator = locatorMetadata.singleLineAddressField != null;
            }

            private function locatorMetadataRequest_faultHandler(fault:Fault, token:Object = null):void
            {
                hasSupportedSingleLineLocator = false;
            }

            protected function serviceBrowser_selectionChangeHandler(event:ServiceBrowserEvent):void
            {
                if (event.hasValidSelection)
                {
                    const selectedGeocodeServer:GeocodeServerNode = serviceBrowser.serviceSelection.getItemAt(0) as GeocodeServerNode;
                    locatorURL = selectedGeocodeServer.url;
                    resetLocatorValidationRequest();
                    currentState = lastState;
                }
            }

            protected function backButton_clickHandler(event:MouseEvent):void
            {
                currentState = lastState;
            }

            private function browseForLocatorsIfNeeded():void
            {
                if (!hasGeocodeServerEndPoint())
                {
                    browseForLocators();
                }
            }

            private function browseForLocators():void
            {
                currentState = "browsingLocators";
                serviceBrowser.browseService();
            }

            private function hasGeocodeServerEndPoint():Boolean
            {
                const endsWithGeocodeServer:RegExp = / \/ GeocodeServer \/? $ /ix;
                return endsWithGeocodeServer.test(locatorURL);
            }

            protected function linkDataGrid_moveItemDownHandler(event:ModifyItemEvent):void
            {
                ItemModifierDataGrid.moveItemDown(event.item, linksDataProvider);
            }

            protected function linkDataGrid_moveItemUpHandler(event:ModifyItemEvent):void
            {
                ItemModifierDataGrid.moveItemUp(event.item, linksDataProvider);
            }

            protected function linkDataGrid_editItemHandler(event:ModifyItemEvent):void
            {
                const link:Link = event.item as Link;
                linkPopUp = link.url ? new URLLinkPropertiesPopUp() : new PopUpLinkPropertiesPopUp();
                linkPopUp.overrideLink(link);
                linkPopUp.addEventListener(PopUpEvent.CLOSE, editLink_closeHandler, false, 0, true);
                linkPopUp.open(FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
            }

            private function editLink_closeHandler(event:PopUpEvent):void
            {
                linkPopUp.removeEventListener(PopUpEvent.CLOSE, editLink_closeHandler);
                linkPopUp = null;

                if (event.commit)
                {
                    const replacementIndex:int = linksDataProvider.getItemIndex(event.data.originalLink);
                    linksDataProvider.removeItemAt(replacementIndex);
                    linksDataProvider.addItemAt(event.data.link, replacementIndex);
                }
            }

            protected function startAddPopUpLink():void
            {
                linkPopUp = new PopUpLinkPropertiesPopUp();
                linkPopUp.addEventListener(PopUpEvent.CLOSE, addLink_closeHandler, false, 0, true);
                linkPopUp.open(FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
            }

            protected function startAddURLLink():void
            {
                linkPopUp = new URLLinkPropertiesPopUp();
                linkPopUp.addEventListener(PopUpEvent.CLOSE, addLink_closeHandler, false, 0, true);
                linkPopUp.open(FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
            }

            protected function addLink_closeHandler(event:PopUpEvent):void
            {
                linkPopUp.removeEventListener(PopUpEvent.CLOSE, editLink_closeHandler);
                linkPopUp = null;

                if (event.commit)
                {
                    linksDataProvider.addItem(event.data);
                }
            }

            protected function linkDataGrid_removeItemHandler(event:ModifyItemEvent):void
            {
                ItemModifierDataGrid.removeItem(event.item, linksDataProvider);
            }

            public function startAddMapService():void
            {
                var mapServicePopUp:MapServicePopUp = new MapServicePopUp();
                mapServicePopUp.addEventListener(PopUpEvent.CLOSE, addMapServicePopUp_closeHandler);
                mapServicePopUp.open(FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
            }

            protected function addMapServicePopUp_closeHandler(event:PopUpEvent):void
            {
                event.currentTarget.addEventListener(PopUpEvent.CLOSE, addMapServicePopUp_closeHandler);
                if (event.commit)
                {
                    mapServicesDataProvider.addItem(event.data);
                }
            }

            public function startEditMapService(mapService:MapService):void
            {
                var mapServicePopUp:MapServicePopUp = new MapServicePopUp();
                mapServicePopUp.overrideMapService(mapService);
                mapServicePopUp.addEventListener(PopUpEvent.CLOSE, editMapServicePopUp_closeHandler);
                mapServicePopUp.open(FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
            }

            protected function editMapServicePopUp_closeHandler(event:PopUpEvent):void
            {
                event.currentTarget.addEventListener(PopUpEvent.CLOSE, addMapServicePopUp_closeHandler);
                if (event.commit)
                {
                    var replacementIndex:int = mapServicesDataProvider.getItemIndex(event.data.originalMapService);
                    mapServicesDataProvider.removeItemAt(replacementIndex);
                    mapServicesDataProvider.addItemAt(event.data.mapService, replacementIndex);
                }
            }

            protected function mapServicesDataGrid_editItemHandler(event:ModifyItemEvent):void
            {
                startEditMapService(event.item as MapService);
            }

            private function toggleAdvancedSettings():void
            {
                currentState = (currentState == "editingSearchNormal") ? "editingSearchAdvanced" : "editingSearchNormal";
            }

            protected function mapServicesDataGrid_removeItemHandler(event:ModifyItemEvent):void
            {
                mapServicesDataProvider.removeItem(event.item);
            }

            private function searchFieldsToLabel(mapService:MapService, column:GridColumn):String
            {
                return (mapService.searchFields.length > 0) ?
                    LabelUtil.itemToLabel(mapService.searchFields) : resourceManager.getString('BuilderStrings', 'query.allFields')
            }

            override public function set currentState(value:String):void
            {
                lastState = super.currentState;
                super.currentState = value;
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="editingSearchNormal" stateGroups="editingSearch"/>
        <s:State name="editingSearchAdvanced" stateGroups="editingSearch"/>
        <s:State name="editingLinks"/>
        <s:State name="browsingLocators"/>
    </s:states>

    <s:Group width="100%" height="100%"
             excludeFrom="browsingLocators">
        <!--SEARCH-->
        <s:Form width="100%" includeIn="editingSearch">
            <s:layout>
                <s:FormLayout gap="-10"
                              paddingBottom="-10"
                              paddingTop="-10"/>
            </s:layout>

            <s:Group>
                <s:CheckBox left="5" top="10" bottom="15"
                            fontSize="14"
                            fontWeight="bold"
                            label="{resourceManager.getString('BuilderStrings', 'headerController.locator')}"
                            selected="@{headerControllerModel.locatorEnabled}"/>
            </s:Group>

            <s:FormItem width="100%"
                        enabled="{headerControllerModel.locatorEnabled}"
                        label="{resourceManager.getString('BuilderStrings', 'headerController.urlType')}">
                <s:HGroup width="100%" gap="2">
                    <components:SearchInput width="400"
                                            direction="ltr"
                                            search="browseForLocatorsIfNeeded()"
                                            searchButtonLabel="{resourceManager.getString('BuilderStrings', 'serviceBrowser.browse')}"
                                            searchButtonToolTip="{resourceManager.getString('BuilderStrings', 'serviceBrowser.browseTooltip')}"
                                            searchHistory="{RecentlyUsedURLsModel.getInstance().urls}"
                                            searchTextInputToolTip="{resourceManager.getString('BuilderStrings', 'serviceBrowser.urlTooltip')}"
                                            text="@{locatorURL}"/>

                    <graphics:green_check width="20" height="20"
                                          includeInLayout="{hasSupportedSingleLineLocator}"
                                          layoutDirection="ltr"
                                          visible="{hasSupportedSingleLineLocator}"/>

                    <s:Group includeInLayout="{!hasSupportedSingleLineLocator}"
                             toolTip="{resourceManager.getString('BuilderStrings', 'headerController.needSingleLineFieldLocator')}"
                             visible="{!hasSupportedSingleLineLocator}">
                        <graphics:warning width="20" height="20"/>
                    </s:Group>

                    <s:CheckBox id="useProxy"
                                label="{resourceManager.getString('BuilderStrings', 'configLayerView.useProxy')}"
                                selected="@{headerControllerModel.useProxy}"/>

                    <s:Group toolTip="{resourceManager.getString('BuilderStrings', 'httpProxyMissing')}" visible="{useProxy.selected
                                        &amp;&amp; !Model.instance.proxyURL}">
                        <graphics:warning width="20" height="20"/>
                    </s:Group>
                </s:HGroup>
            </s:FormItem>

            <s:Group enabled="{headerControllerModel.locatorEnabled}">
                <s:Label buttonMode="true"
                         click="toggleAdvancedSettings()"
                         paddingBottom="10"
                         paddingLeft="15"
                         paddingTop="10"
                         text.editingSearchAdvanced="{resourceManager.getString('BuilderStrings', 'settings.hideAdvancedSettings')}"
                         text.editingSearchNormal="{resourceManager.getString('BuilderStrings', 'settings.showAdvancedSettings')}"
                         textDecoration="underline"/>
            </s:Group>

            <s:FormItem width="100%"
                        enabled="{headerControllerModel.locatorEnabled}"
                        includeIn="editingSearchAdvanced"
                        label="{resourceManager.getString('BuilderStrings', 'locate.minScore')}"
                        toolTip="{resourceManager.getString('BuilderStrings', 'locate.minScoreToolTip')}">
                <s:layout>
                    <s:HorizontalLayout verticalAlign="middle"/>
                </s:layout>

                <s:Label text="0%"/>

                <s:HSlider width="200"
                           maximum="100"
                           minimum="0"
                           stepSize="1"
                           value="@{headerControllerModel.minScore}"/>

                <s:Label text="100%"/>

                <s:NumericStepper maximum="100"
                                  minimum="0"
                                  value="@{headerControllerModel.minScore}"/>

                <s:Label text="%"/>
            </s:FormItem>

            <s:FormItem width="100%"
                        enabled="{headerControllerModel.locatorEnabled}"
                        includeIn="editingSearchAdvanced"
                        label="{resourceManager.getString('BuilderStrings', 'georss.zoomScale')}">
                <s:TextInput width="100" text="@{headerControllerModel.zoomScale}"/>
            </s:FormItem>

            <s:Group>
                <s:CheckBox left="5" top="20" bottom="5"
                            fontSize="14"
                            fontWeight="bold"
                            label="{resourceManager.getString('BuilderStrings', 'headerController.mapServices')}"
                            selected="@{headerControllerModel.mapServicesEnabled}"/>
            </s:Group>

            <s:VGroup width="100%" height="100%"
                      enabled="{headerControllerModel.mapServicesEnabled}"
                      gap="1"
                      horizontalAlign="right"
                      paddingLeft="15">
                <s:Button click="startAddMapService()"
                          label="{resourceManager.getString('BuilderStrings', 'headerController.addMapService')}"
                          skinClass="com.esri.builder.skins.BlueAddButtonSkin"/>

                <components:ItemModifierDataGrid id="mapServicesDataGrid"
                                                 width="100%" height="100"
                                                 dataProvider="{mapServicesDataProvider}"
                                                 editItem="mapServicesDataGrid_editItemHandler(event)"
                                                 removeItem="mapServicesDataGrid_removeItemHandler(event)"
                                                 showDataTips="true">
                    <components:columns>
                        <s:ArrayList>
                            <s:GridColumn dataField="url" headerText="{resourceManager.getString('BuilderStrings', 'headerController.label')}"/>

                            <s:GridColumn width="80"
                                          dataField="layerIds"
                                          headerText="{resourceManager.getString('BuilderStrings', 'edit.layers')}"/>

                            <s:GridColumn width="80"
                                          dataField="searchFields"
                                          dataTipFunction="searchFieldsToLabel"
                                          headerText="{resourceManager.getString('BuilderStrings', 'edit.fields')}"
                                          labelFunction="searchFieldsToLabel"/>

                            <s:GridColumn width="60"
                                          headerText="{resourceManager.getString('BuilderStrings', 'headerController.actions')}"
                                          itemRenderer="com.esri.builder.renderers.EditableRemovableGridItemRenderer"
                                          maxWidth="60"/>
                        </s:ArrayList>
                    </components:columns>
                </components:ItemModifierDataGrid>
            </s:VGroup>
        </s:Form>

        <!--LINKS-->
        <s:VGroup width="100%" height="100%"
                  gap="1"
                  horizontalAlign="right"
                  includeIn="editingLinks"
                  paddingBottom="10"
                  paddingLeft="25"
                  paddingRight="25"
                  paddingTop="10">
            <s:HGroup>
                <s:Button click="startAddPopUpLink()"
                          label="{resourceManager.getString('BuilderStrings', 'headerController.addPopUpLink')}"
                          skinClass="com.esri.builder.skins.BlueAddButtonSkin"/>

                <s:Button click="startAddURLLink()"
                          label="{resourceManager.getString('BuilderStrings', 'headerController.addURLLink')}"
                          skinClass="com.esri.builder.skins.BlueAddButtonSkin"/>
            </s:HGroup>

            <components:ItemModifierDataGrid width="100%" height="250"
                                             dataProvider="{linksDataProvider}"
                                             editItem="linkDataGrid_editItemHandler(event)"
                                             moveItemDown="linkDataGrid_moveItemDownHandler(event)"
                                             moveItemUp="linkDataGrid_moveItemUpHandler(event)"
                                             removeItem="linkDataGrid_removeItemHandler(event)">
                <components:columns>
                    <s:ArrayList>
                        <s:GridColumn dataField="label" headerText="{resourceManager.getString('BuilderStrings', 'headerController.label')}"/>

                        <s:GridColumn width="80"
                                      dataField="type"
                                      headerText="{resourceManager.getString('BuilderStrings', 'headerController.type')}"/>

                        <s:GridColumn width="110"
                                      headerText="{resourceManager.getString('BuilderStrings', 'headerController.actions')}"
                                      itemRenderer="com.esri.builder.renderers.MovableEditableRemovableGridItemRenderer"/>
                    </s:ArrayList>
                </components:columns>
            </components:ItemModifierDataGrid>
        </s:VGroup>
    </s:Group>

    <s:VGroup width="100%" height="100%"
              horizontalAlign="right"
              includeIn="browsingLocators">
        <components:ServiceBrowser id="serviceBrowser"
                                   width="100%" height="100%"
                                   minHeight="250"
                                   minWidth="450"
                                   searchType="locators"
                                   selectionChange="serviceBrowser_selectionChangeHandler(event)"
                                   serviceURL="{locatorURL}"/>

        <s:HGroup width="100%" verticalAlign="middle">
            <s:Button click="backButton_clickHandler(event)"
                      label="{resourceManager.getString('BuilderStrings', 'query.goBack')}"
                      skinClass="com.esri.builder.skins.LinkButtonSkin"/>
        </s:HGroup>
    </s:VGroup>
</s:VGroup>
