<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:Form xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:supportClasses="com.esri.builder.views.supportClasses.*"
        xmlns:components="com.esri.builder.components.*"
        width="100%">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.portal.supportClasses.PopUpInfo;
            import com.esri.builder.components.FieldPickerEvent;
            import com.esri.builder.views.supportClasses.FieldPickerSelectionUtil;

            import mx.collections.ArrayList;

            [Bindable]
            private var popUpFieldInfos:ArrayList = new ArrayList();

            private var _popUpInfo:PopUpInfo;

            public function get popUpInfo():PopUpInfo
            {
                return _popUpInfo;
            }

            [Bindable]
            public function set popUpInfo(value:PopUpInfo):void
            {
                if (value)
                {
                    _popUpInfo = value;
                    popUpFieldInfos.source = value.popUpFieldInfos;
                }
            }

            private function titleFieldPicker_fieldSelectedHandler(event:FieldPickerEvent):void
            {
                addToTitle(event.template);
            }

            private function addToTitle(text:String):void
            {
                FieldPickerSelectionUtil.insertIntoTextSelectionAndFocus(text, titleTextInput);
                popUpInfo.title = titleTextInput.text; //updating text manually since binding does not kick in
            }
        ]]>
    </fx:Script>

    <s:layout>
        <s:FormLayout gap="-6"/>
    </s:layout>

    <s:FormItem label="{resourceManager.getString('BuilderStrings', 'geoprocessing.title')}">
        <s:layout>
            <s:HorizontalLayout verticalAlign="middle"/>
        </s:layout>

        <s:TextInput id="titleTextInput"
                     width="65%"
                     text="@{popUpInfo.title}"/>

        <components:PopUpFieldPicker fieldSelected="titleFieldPicker_fieldSelectedHandler(event)"
                                     fields="{popUpFieldInfos}"
                                     includeInLayout="{popUpFieldInfos.length &gt; 0}"
                                     visible="{popUpFieldInfos.length &gt; 0}"/>
    </s:FormItem>

    <s:FormItem label="{resourceManager.getString('BuilderStrings', 'geoprocessing.fields')}">
        <supportClasses:KeyValueEditor width="100%"
                                       minHeight="75"
                                       popUpFieldInfos="{popUpFieldInfos}"/>
    </s:FormItem>
</s:Form>
