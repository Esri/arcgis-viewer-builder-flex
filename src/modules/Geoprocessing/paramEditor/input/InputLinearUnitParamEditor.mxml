<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:Form xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:fieldClasses="com.esri.ags.skins.fieldClasses.*"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        width="100%"
        creationComplete="init()">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.Units;

            import modules.Geoprocessing.parameters.BaseParameter;
            import modules.Geoprocessing.parameters.LinearUnitParameter;
            import modules.Geoprocessing.supportClasses.UnitItem;

            import mx.collections.ArrayList;

            private var linearUnitParam:LinearUnitParameter;

            private var _param:BaseParameter;

            [Bindable]
            public function get param():BaseParameter
            {
                return _param;
            }

            public function set param(value:BaseParameter):void
            {
                _param = value;

                if (value)
                {
                    linearUnitParam = value.defaultValue as LinearUnitParameter;
                }
            }

            private function init():void
            {
                setUnitOptions();
                selectDefaultUnit(param.defaultValue.units);
                selectUnitChoice(param.defaultValue.units);
                updateUnitChoiceList();
            }

            private function setUnitOptions():void
            {
                var unitOptions:Array = [];
                unitOptions.push(new UnitItem("Feet", Units.FEET));
                unitOptions.push(new UnitItem("Miles", Units.MILES));
                unitOptions.push(new UnitItem("Nautical Miles", Units.NAUTICAL_MILES));
                unitOptions.push(new UnitItem("Meters", Units.METERS));
                unitOptions.push(new UnitItem("Kilometers", Units.KILOMETERS));
                unitDropDown.dataProvider = new ArrayList(unitOptions);
                unitDropDown.typicalItem = getLongestUnitItemLabel(unitOptions);
            }

            private function selectDefaultUnit(unit:String):void
            {
                var unitIndex:int = getUnitIndex(unit);

                if (unitIndex > -1)
                {
                    unitDropDown.selectedIndex = unitIndex;
                }
            }

            private function getUnitIndex(unit:String):int
            {
                var index:int = -1;

                var unitItems:Array = unitDropDown.dataProvider.toArray();
                var totalUnitItems:int = unitItems.length;
                var currentUnitItem:UnitItem;

                for (var i:int = 0; i < totalUnitItems; i++)
                {
                    currentUnitItem = unitItems[i];
                    if (currentUnitItem.value == unit)
                    {
                        index = i;
                        break;
                    }
                }

                return index;
            }

            private function updateDefaultUnits():void
            {
                var unitItem:UnitItem = unitDropDown.selectedItem;
                param.defaultValue.units = unitItem.value;

                selectUnitChoice(unitItem.value);
                updateUnitChoiceList();
            }

            private function updateUnitChoiceList():void
            {
                var totalCheckBoxes:int = unitCheckBoxGroup.numChildren;
                var choiceList:Array = [];
                var currentCheckBox:CheckBox;
                for (var i:int = 0; i < totalCheckBoxes; i++)
                {
                    currentCheckBox = unitCheckBoxGroup.getChildAt(i) as CheckBox;
                    if (currentCheckBox.selected)
                    {
                        //TODO: more elegant solution than passing name?
                        choiceList.push(currentCheckBox.name);
                    }
                }

                param.choiceList = choiceList;
            }

            private function selectUnitChoice(unit:String):void
            {
                var totalCheckBoxes:int = unitCheckBoxGroup.numChildren;
                var currentCheckBox:CheckBox;
                for (var i:int = 0; i < totalCheckBoxes; i++)
                {
                    currentCheckBox = unitCheckBoxGroup.getChildAt(i) as CheckBox;

                    if (currentCheckBox.name == unit)
                    {
                        currentCheckBox.selected = true;
                        currentCheckBox.enabled = false;
                    }
                    else
                    {
                        currentCheckBox.enabled = true;
                    }
                }
            }

            private function getLongestUnitItemLabel(unitOptions:Array):String
            {
                var longestLabel:String = "";
                var currentLabel:String;
                for each (var unitItem:UnitItem in unitOptions)
                {
                    currentLabel = unitItem.label;
                    if (currentLabel.length > longestLabel.length)
                    {
                        longestLabel = currentLabel;
                    }
                }

                return longestLabel;
            }

            private function updateDefaultValue():void
            {
                param.defaultValue.distance = distanceInput.data;
            }
        ]]>
    </fx:Script>

    <s:FormItem label="{resourceManager.getString('BuilderStrings', 'geoprocessing.defaultDistance')}">
        <fieldClasses:DoubleField id="distanceInput"
                                  change="updateDefaultValue()"
                                  text="{param.defaultValue.distance}"/>
    </s:FormItem>

    <s:FormItem label="{resourceManager.getString('BuilderStrings', 'geoprocessing.defaultUnit')}">
        <s:DropDownList id="unitDropDown" change="updateDefaultUnits()"/>
    </s:FormItem>

    <s:FormItem label="{resourceManager.getString('BuilderStrings', 'geoprocessing.unitChoices')}">
        <s:VGroup id="unitCheckBoxGroup" width="100%">
            <s:CheckBox name="{Units.FEET}"
                        change="updateUnitChoiceList()"
                        label="{resourceManager.getString('BuilderStrings', 'geoprocessing.feet')}"/>

            <s:CheckBox name="{Units.MILES}"
                        change="updateUnitChoiceList()"
                        label="{resourceManager.getString('BuilderStrings', 'geoprocessing.miles')}"/>

            <s:CheckBox name="{Units.NAUTICAL_MILES}"
                        change="updateUnitChoiceList()"
                        label="{resourceManager.getString('BuilderStrings', 'geoprocessing.nauticalMiles')}"/>

            <s:CheckBox name="{Units.METERS}"
                        change="updateUnitChoiceList()"
                        label="{resourceManager.getString('BuilderStrings', 'geoprocessing.meters')}"/>

            <s:CheckBox name="{Units.KILOMETERS}"
                        change="updateUnitChoiceList()"
                        label="{resourceManager.getString('BuilderStrings', 'geoprocessing.kilometers')}"/>
        </s:VGroup>
    </s:FormItem>
</s:Form>
