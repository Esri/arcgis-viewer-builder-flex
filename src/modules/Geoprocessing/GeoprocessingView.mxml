<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:components="com.esri.builder.components.*"
          xmlns:supportClasses="modules.Geoprocessing.supportClasses.*"
          xmlns:paramEditor="modules.Geoprocessing.paramEditor.*"
          xmlns:graphics="assets.graphics.*"
          width="100%" height="100%"
          gap="0"
          implements="modules.IWidgetView">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.tasks.JSONTask;
            import com.esri.builder.components.ModifyItemEvent;
            import com.esri.builder.components.serviceBrowser.nodes.GPTaskNode;
            import com.esri.builder.components.serviceBrowser.supportClasses.ServiceBrowserEvent;
            import com.esri.builder.model.Model;
            import com.esri.builder.model.RecentlyUsedURLsModel;
            import com.esri.builder.views.BuilderAlert;

            import modules.Geoprocessing.parameters.BaseParameter;
            import modules.Geoprocessing.supportClasses.ServiceDescriptionParamParser;
            import modules.IWidgetModel;

            import mx.collections.ArrayList;
            import mx.rpc.AsyncResponder;
            import mx.rpc.Fault;
            import mx.utils.StringUtil;

            private var previousState:String;

            [Bindable]
            private var taskURL:String;

            [Bindable]
            private var gpModel:GeoprocessingModel;

            [Bindable]
            private var presentationInputParams:ArrayList = new ArrayList();

            [Bindable]
            private var presentationOutputParams:ArrayList = new ArrayList();

            [Bindable]
            private var presentationLayerOrder:ArrayList = new ArrayList();

            public function get widgetModel():IWidgetModel
            {
                return gpModel;
            }

            public function set widgetModel(value:IWidgetModel):void
            {
                if (value is GeoprocessingModel)
                {
                    gpModel = value as GeoprocessingModel;
                    taskURL = gpModel.taskURL;

                    if (hasInputOrOutputParams(gpModel))
                    {
                        resetState();
                    }
                }
            }

            private function hasInputOrOutputParams(gpModel:GeoprocessingModel):Boolean
            {
                var hasInputParams:Boolean = gpModel.inputParams.length > 0;
                var hasOutputParams:Boolean = gpModel.outputParams.length > 0;
                return hasInputParams || hasOutputParams;
            }

            private function inspectTaskURL():void
            {
                currentState = "taskInput";
                inspectService(taskURL);
            }

            private function inspectService(url:String):void
            {
                var urlVars:URLVariables = new URLVariables();
                urlVars.f = "json";

                var inspectService:JSONTask = new JSONTask();
                inspectService.url = url;
                inspectService.execute(urlVars, new AsyncResponder(inspectService_resultHandler, inspectService_faultHandler));
            }

            private function inspectService_resultHandler(serviceDescription:Object, token:Object = null):void
            {
                gpModel = createGPModel(serviceDescription);
                resetState();
            }

            private function resetPresentationViews():void
            {
                presentationInputParams.source = gpModel.inputParams;
                presentationOutputParams.source = gpModel.outputParams;
                presentationLayerOrder.source = gpModel.layerOrder;

                gpParamTabBar.selectedIndex = 0;
            }

            private function resetState():void
            {
                currentState = "configuringInputParams";
                resetPresentationViews();
            }

            private function inspectService_faultHandler(fault:Fault, token:Object = null):void
            {
                BuilderAlert.show(resourceManager.getString('BuilderStrings', 'geoprocessing.couldNotInspectTask'),
                                  resourceManager.getString('BuilderStrings', 'error'));
            }

            private function createGPModel(serviceDescription:Object):GeoprocessingModel
            {
                var model:GeoprocessingModel = new GeoprocessingModel();
                model.taskURL = taskURL;
                model.helpURL = serviceDescription.helpUrl;

                var serviceParamParser:ServiceDescriptionParamParser = new ServiceDescriptionParamParser(serviceDescription.parameters);
                model.inputParams = serviceParamParser.inputParams;
                model.outputParams = serviceParamParser.outputParams;
                model.layerOrder = serviceParamParser.layerOrder;

                return model;
            }

            private function updateCurrentState():void
            {
                var selectedIndex:int = gpParamTabBar.selectedIndex;

                if (selectedIndex == 0)
                {
                    currentState = "configuringInputParams";
                }
                else if (selectedIndex == 1)
                {
                    currentState = "configuringOutputParams";
                }
                else if (selectedIndex == 2)
                {
                    currentState = "configuringLayerOrder";
                }
                else if (selectedIndex == 3)
                {
                    currentState = "configuringOptions";
                }
            }

            public function submit():Boolean
            {
                if (!taskURL)
                {
                    BuilderAlert.show(resourceManager.getString('BuilderStrings', 'geoprocessing.missingTaskURL'),
                                      resourceManager.getString('BuilderStrings', 'widgetsView.widgetConfigurationError'));
                    return false;
                }
                if (taskURL != gpModel.taskURL)
                {
                    BuilderAlert.show(resourceManager.getString('BuilderStrings', 'geoprocessing.taskNotLoaded'),
                                      resourceManager.getString('BuilderStrings', 'widgetsView.widgetConfigurationError'));
                    return false;
                }
                else if (gpModel.hasRequiredAndUnsupportedParams())
                {
                    BuilderAlert.show(resourceManager.getString('BuilderStrings', 'geoprocessing.hasRequiredAndUnsupportedParams'),
                                      resourceManager.getString('BuilderStrings', 'widgetsView.widgetConfigurationError'));
                    return false;
                }
                else
                {
                    return true;
                }
            }

            public function cancel():void
            {
                // NOOP
            }

            private function serviceBrowser_selectionChangeHandler(event:ServiceBrowserEvent):void
            {
                if (event.hasValidSelection)
                {
                    var selectedGPTask:GPTaskNode = serviceBrowser.serviceSelection.getItemAt(0) as GPTaskNode;
                    taskURL = selectedGPTask.url;
                    inspectTaskURL();
                    currentState = "taskInput";
                }
            }

            private function inputParamDataGrid_editParam(event:ModifyItemEvent):void
            {
                currentState = "editingInputParam";
                const baseParam:BaseParameter = event.item as BaseParameter;
                inputParamEditor.param = baseParam;
                inputParamEditor.defaultValueEditView = baseParam.createInputEditorView();
            }

            private function outputParamDataGrid_editParam(event:ModifyItemEvent):void
            {
                currentState = "editingOutputParam";
                const baseParam:BaseParameter = event.item as BaseParameter;
                outputParamEditor.param = baseParam;
                outputParamEditor.defaultValueEditView = baseParam.createOutputEditorView();
            }

            private function inspectTaskURLOrBrowseURLIfNeeded():void
            {
                normalizeTaskURL();

                if (hasGPTaskEndPoint())
                {
                    inspectTaskURL();
                }
                else
                {
                    currentState = "browseTasks";
                    serviceBrowser.browseService();
                }
            }

            private function normalizeTaskURL():void
            {
                taskURL = decodeURI(taskURL);
                taskURL = encodeURI(taskURL);
            }

            private function hasGPTaskEndPoint():Boolean
            {
                const endsWithGPServerAndTaskName:RegExp = / \/ GPServer \/ .+ $ /ix;
                return endsWithGPServerAndTaskName.test(taskURL);
            }

            override public function set currentState(value:String):void
            {
                previousState = currentState
                super.currentState = value;
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="taskInput" stateGroups="inspectingTaskURL"/>
        <s:State name="browseTasks" stateGroups="inspectingTaskURL"/>
        <s:State name="configuringInputParams"/>
        <s:State name="configuringOutputParams"/>
        <s:State name="configuringLayerOrder"/>
        <s:State name="configuringOptions"/>
        <s:State name="editingInputParam" stateGroups="editingParam"/>
        <s:State name="editingOutputParam" stateGroups="editingParam"/>
    </s:states>

    <s:HGroup width="100%"
              excludeFrom="browseTasks"
              paddingBottom="6"
              verticalAlign="middle">
        <s:Label fontWeight="bold" text="{resourceManager.getString('BuilderStrings', 'geoprocessing.taskURL')}"/>

        <components:SearchInput width="100%"
                                direction="ltr"
                                search="inspectTaskURLOrBrowseURLIfNeeded()"
                                searchButtonLabel="{resourceManager.getString('BuilderStrings', 'serviceBrowser.browse')}"
                                searchButtonToolTip="{resourceManager.getString('BuilderStrings', 'serviceBrowser.browseTooltip')}"
                                searchHistory="{RecentlyUsedURLsModel.getInstance().urls}"
                                searchTextInputToolTip="{resourceManager.getString('BuilderStrings', 'serviceBrowser.urlTooltip')}"
                                text="@{taskURL}"/>
    </s:HGroup>

    <s:VGroup width="100%" height="100%"
              left="10" right="10" top="10" bottom="10"
              horizontalAlign="right"
              includeIn="browseTasks">
        <components:ServiceBrowser id="serviceBrowser"
                                   allowMultipleSelection="false"
                                   searchType="geoprocessingtasks"
                                   selectionChange="serviceBrowser_selectionChangeHandler(event)"
                                   serviceURL="{taskURL}"/>

        <s:Button click="currentState = previousState"
                  label="{resourceManager.getString('BuilderStrings', 'goBack')}"
                  skinClass="com.esri.builder.skins.LinkButtonSkin"/>
    </s:VGroup>

    <s:TabBar id="gpParamTabBar"
              change="updateCurrentState()"
              excludeFrom="inspectingTaskURL"
              itemCreationPolicy="immediate">
        <s:dataProvider>
            <s:ArrayList>
                <s:DataItem label="{StringUtil.substitute(resourceManager.getString('BuilderStrings','geoprocessing.input'), presentationInputParams.length)}"/>
                <s:DataItem label="{StringUtil.substitute(resourceManager.getString('BuilderStrings','geoprocessing.output'), presentationOutputParams.length)}"/>
                <fx:String>{resourceManager.getString('BuilderStrings', 'geoprocessing.layerOrder')}</fx:String>
                <fx:String>{resourceManager.getString('BuilderStrings', 'geoprocessing.options')}</fx:String>
            </s:ArrayList>
        </s:dataProvider>
    </s:TabBar>

    <s:Group width="100%" height="100%"
             excludeFrom="inspectingTaskURL">
        <s:Rect left="0" right="0" top="-1" bottom="0">
            <s:stroke>
                <s:SolidColorStroke/>
            </s:stroke>
        </s:Rect>

        <supportClasses:ParamDataGrid width="100%" height="100%"
                                      left="10" right="10" top="10" bottom="10"
                                      dataProvider="{presentationInputParams}"
                                      editItem="inputParamDataGrid_editParam(event)"
                                      includeIn="configuringInputParams"/>

        <s:VGroup left="10" right="10" top="10" bottom="10"
                  includeIn="configuringOutputParams">
            <supportClasses:ParamDataGrid width="100%" height="100%"
                                          dataProvider="{presentationOutputParams}"
                                          editItem="outputParamDataGrid_editParam(event)"/>

            <s:CheckBox label="{resourceManager.getString('BuilderStrings', 'shareResults')}" selected="@{gpModel.shareResults}"/>
        </s:VGroup>

        <s:VGroup width="100%" height="100%"
                  includeIn="editingInputParam"
                  itemCreationPolicy="immediate">
            <paramEditor:InputParamEditor id="inputParamEditor"
                                          width="100%" height="100%"/>

            <s:Group>
                <s:Button left="10" bottom="10"
                          click="updateCurrentState()"
                          label="{resourceManager.getString('BuilderStrings', 'goBack')}"
                          skinClass="com.esri.builder.skins.LinkButtonSkin"/>
            </s:Group>
        </s:VGroup>

        <s:VGroup width="100%" height="100%"
                  includeIn="editingOutputParam"
                  itemCreationPolicy="immediate">
            <paramEditor:OutputParamEditor id="outputParamEditor"
                                           width="100%" height="100%"/>

            <s:Group>
                <s:Button left="10" bottom="10"
                          click="updateCurrentState()"
                          label="{resourceManager.getString('BuilderStrings', 'goBack')}"
                          skinClass="com.esri.builder.skins.LinkButtonSkin"/>

            </s:Group>
        </s:VGroup>

        <s:Group width="100%" height="100%"
                 left="10" right="10" top="10" bottom="10"
                 includeIn="configuringLayerOrder">
            <s:Label left="10" top="10"
                     includeInLayout="{presentationLayerOrder.length == 0}"
                     text="{resourceManager.getString('BuilderStrings', 'geoprocessing.noLayersToReorder')}"
                     visible="{presentationLayerOrder.length == 0}"/>

            <supportClasses:LayerOrderList width="100%" height="100%"
                                           dataProvider="{presentationLayerOrder}"
                                           includeInLayout="{presentationLayerOrder.length > 0}"
                                           visible="{presentationLayerOrder.length > 0}"/>
        </s:Group>

        <s:Form width="100%"
                left="10" right="10" top="10" bottom="10"
                includeIn="configuringOptions">
            <s:FormItem width="100%" label="{resourceManager.getString('BuilderStrings', 'geoprocessing.helpURL')}">
                <s:TextInput id="helpURLInput"
                             width="100%"
                             direction="ltr"
                             text="@{gpModel.helpURL}"/>
            </s:FormItem>

            <s:FormItem width="100%" label="{resourceManager.getString('BuilderStrings', 'geoprocessing.description')}">
                <s:TextInput id="gpDescriptionInput"
                             width="100%"
                             text="@{gpModel.description}"/>
            </s:FormItem>

            <s:FormItem width="100%" label="{resourceManager.getString('BuilderStrings', 'geoprocessing.autoSubmit')}">
                <components:SliderToggleButton deselectedLabel="{resourceManager.getString('BuilderStrings', 'off')}"
                                               selected="@{gpModel.autoSubmit}"
                                               selectedLabel="{resourceManager.getString('BuilderStrings', 'on')}"/>
            </s:FormItem>

            <s:FormItem label="{resourceManager.getString('BuilderStrings', 'configLayerView.useProxy')}">
                <s:layout>
                    <s:HorizontalLayout verticalAlign="middle"/>
                </s:layout>

                <s:CheckBox id="useProxy" selected="@{gpModel.useProxy}"/>

                <graphics:warning width="20" height="20"
                                  visible="{useProxy.selected 
                                      &amp;&amp; !Model.instance.proxyURL}"/>

                <s:Label text="{resourceManager.getString('BuilderStrings', 'httpProxyMissing')}" visible="{useProxy.selected
                                                                                         &amp;&amp; !Model.instance.proxyURL}"/>
            </s:FormItem>
        </s:Form>
    </s:Group>
</s:VGroup>
