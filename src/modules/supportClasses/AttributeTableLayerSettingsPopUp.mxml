<?xml version="1.0" encoding="utf-8"?>
<!--
  //////////////////////////////////////////////////////////////////
  // Copyright (c) 2008-2013 Esri. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //    http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  ////////////////////////////////////////////////////////////////
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                           xmlns:s="library://ns.adobe.com/flex/spark"
                           xmlns:components="com.esri.builder.components.*"
                           width="100%"
                           creationComplete="this_creationCompleteHandler(event)"
                           minHeight="85"
                           minWidth="250"
                           stateChangeComplete="updatePopUpPosition()">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.layers.supportClasses.EditFieldsInfo;
            import com.esri.ags.layers.supportClasses.FeatureLayerDetails;
            import com.esri.ags.layers.supportClasses.Field;
            import com.esri.ags.layers.supportClasses.LayerDetails;
            import com.esri.ags.portal.supportClasses.PopUpFieldFormat;
            import com.esri.builder.components.ModifyItemEvent;
            import com.esri.builder.renderers.MovableEditableGridItemRenderer;
            import com.esri.builder.renderers.MovableGridItemRenderer;
            import com.esri.builder.supportClasses.FieldUtil;
            import com.esri.builder.views.popups.FieldFormatPopUp;

            import mx.collections.ArrayList;
            import mx.core.FlexGlobals;
            import mx.events.CollectionEvent;
            import mx.events.CollectionEventKind;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;

            import spark.events.PopUpEvent;

            [Bindable]
            public var showAttachmentsEnabled:Boolean;
            [Bindable]
            public var showRelatedRecordsEnabled:Boolean;

            [Bindable]
            public var supportsAttachments:Boolean;
            [Bindable]
            public var supportsRelatedRecords:Boolean;

            [Bindable]
            private var showRelatedRecords:Boolean = true;
            [Bindable]
            private var showAttachments:Boolean = true;

            private var availableFields:Array;

            public var originalLayerSettings:AttributeTableLayerSettings;

            private var _layerDetails:LayerDetails;

            public function get layerDetails():LayerDetails
            {
                return _layerDetails;
            }

            public function set layerDetails(value:LayerDetails):void
            {
                if (value)
                {
                    _layerDetails = value;
                    setOptions(value);
                    updatePopUpPosition();
                }
            }

            private var _showRequired:Boolean = false;

            public function get showRequired():Boolean
            {
                return _showRequired;
            }

            public function set showRequired(value:Boolean):void
            {
                _showRequired = value;
                currentState = _showRequired ? "showRequired" : "normal"
            }

            public var layerName:String;

            [Bindable]
            private var availableFieldSettingsOptions:ArrayList = new ArrayList();

            protected function this_creationCompleteHandler(event:FlexEvent):void
            {
                availableFieldSettingsOptions.addEventListener(CollectionEvent.COLLECTION_CHANGE, availableItems_collectionChangeHandler);
            }

            protected function availableItems_collectionChangeHandler(event:CollectionEvent):void
            {
                if (event.kind == CollectionEventKind.UPDATE
                    || event.kind == CollectionEventKind.REFRESH
                    || event.kind == CollectionEventKind.RESET)
                {
                    dispatchEvent(new Event("itemInclusionChanged"));
                }
            }

            [Bindable(event="itemInclusionChanged")]
            private function get hasValidLayerSettingsOptions():Boolean
            {
                return hasAtLeastOneSelectedItem(availableFieldSettingsOptions.source);
            }

            private function hasAtLeastOneSelectedItem(items:Array):Boolean
            {
                for each (var item:FieldSettingsOption in items)
                {
                    if (item.selected === true)
                    {
                        return true;
                    }
                }

                return false;
            }

            public function overrideLayerSettings(layerSettings:AttributeTableLayerSettings):void
            {
                if (layerSettings)
                {
                    originalLayerSettings = layerSettings;
                }
            }

            private function setOptions(layerDetails:LayerDetails):void
            {
                if (!layerDetails)
                {
                    return;
                }

                supportsAttachments = layerDetails.hasAttachments;
                supportsRelatedRecords = layerDetails.relationships
                    && layerDetails.relationships.length > 0;

                availableFields = FieldUtil.getValidFields(layerDetails.fields);
                var originalFieldSettings:Array = originalLayerSettings ? originalLayerSettings.fields : [];

                if (originalLayerSettings)
                {
                    showAttachments = originalLayerSettings.showAttachments;
                    showRelatedRecords = originalLayerSettings.showRelatedRecords;
                }

                availableFieldSettingsOptions.source =
                    createFieldSettings(availableFields, originalFieldSettings,
                                        layerDetails.version, getEditorTrackingFieldNames(layerDetails));
            }

            private function createFieldSettings(fields:Array, originalFieldSettings:Array, serverVersion:Number, editorTrackingFieldNames:Array):Array
            {
                //store user-defined settings
                var fieldNameToUserDefinedFieldSettings:Dictionary = new Dictionary();
                var fieldSettings:FieldSettings;
                for each (fieldSettings in originalFieldSettings)
                {
                    fieldNameToUserDefinedFieldSettings[fieldSettings.name] = fieldSettings;
                }

                var isRequiredEditable:Boolean;
                var isEditorTrackingField:Boolean;
                var atLeastOneFieldMatched:Boolean;
                var fieldNameToFieldSettingsOption:Dictionary = new Dictionary();
                var editableFieldSettings:FieldSettings;
                var fieldSettingsOption:FieldSettingsOption;

                var field:Field;
                //init field settings options
                for each (field in fields)
                {
                    isEditorTrackingField = editorTrackingFieldNames.indexOf(field.name) > -1;
                    isRequiredEditable = serverVersion < 10.1 || field.nullable;

                    editableFieldSettings = new FieldSettings();
                    var userDefinedFieldSettings:FieldSettings = fieldNameToUserDefinedFieldSettings[field.name];

                    if (userDefinedFieldSettings)
                    {
                        atLeastOneFieldMatched = true;

                        editableFieldSettings.name = userDefinedFieldSettings.name;
                        editableFieldSettings.alias = userDefinedFieldSettings.alias;
                        editableFieldSettings.tooltip = userDefinedFieldSettings.tooltip;
                        editableFieldSettings.dateFormat = userDefinedFieldSettings.dateFormat;
                        editableFieldSettings.useUTC = userDefinedFieldSettings.useUTC;
                        if (isRequiredEditable && !isEditorTrackingField)
                        {
                            editableFieldSettings.required = userDefinedFieldSettings.required;
                        }
                    }
                    else
                    {
                        editableFieldSettings.name = field.name;
                        editableFieldSettings.alias = field.alias;
                        editableFieldSettings.required = !isRequiredEditable;
                    }

                    fieldSettingsOption = new FieldSettingsOption(editableFieldSettings);
                    fieldSettingsOption.isRequiredEditable = isRequiredEditable;
                    fieldSettingsOption.isEditorTrackingField = isEditorTrackingField;
                    fieldSettingsOption.selected = true;
                    fieldSettingsOption.editable = field.editable;

                    fieldNameToFieldSettingsOption[field.name] = fieldSettingsOption;
                }

                //add user-defined field settings first
                var fieldSettingsOptions:Array = [];
                for each (fieldSettings in originalFieldSettings)
                {
                    fieldSettingsOptions.push(fieldNameToFieldSettingsOption[fieldSettings.name]);
                }

                for each (field in fields)
                {
                    fieldSettingsOption = fieldNameToFieldSettingsOption[field.name];

                    //override selection if we have user-defined fields
                    if (atLeastOneFieldMatched)
                    {
                        fieldSettingsOption.selected = fieldNameToUserDefinedFieldSettings[field.name] != null;
                    }

                    //add extra field settings (not user-defined)
                    if (!fieldNameToUserDefinedFieldSettings[field.name])
                    {
                        fieldSettingsOptions.push(fieldSettingsOption);
                    }
                }

                return fieldSettingsOptions;
            }

            private function resetOptions():void
            {
                availableFieldSettingsOptions.removeAll();
                updatePopUpPosition();
            }

            private function commitAndClose():void
            {
                var layerSettings:AttributeTableLayerSettings = new AttributeTableLayerSettings();
                layerSettings.name = layerName;
                layerSettings.fields = getIncludedFieldSettings();
                layerSettings.showAttachments = supportsAttachments && showAttachments;
                layerSettings.showRelatedRecords = supportsRelatedRecords && showRelatedRecords;

                close(true, { originalLayerSettings: originalLayerSettings, layerSettings: layerSettings });
            }

            override public function close(commit:Boolean = false, data:* = null):void
            {
                availableFieldSettingsOptions.removeEventListener(CollectionEvent.COLLECTION_CHANGE, availableItems_collectionChangeHandler);
                super.close(commit, data);
            }

            override public function updatePopUpPosition():void
            {
                PopUpManager.centerPopUp(this);
            }

            private function getIncludedFieldSettings():Array
            {
                var allFieldSettings:Array = [];

                var fieldSettingsOptions:Array = availableFieldSettingsOptions.source;
                for each (var fieldSettingsOption:FieldSettingsOption in fieldSettingsOptions)
                {
                    if (fieldSettingsOption.selected)
                    {
                        allFieldSettings.push(fieldSettingsOption.settings);
                    }
                }

                return allFieldSettings;
            }

            private function getEditorTrackingFieldNames(layerDetails:LayerDetails):Array
            {
                var editorTrackingFieldNames:Array = [];

                var featureLayerDetails:FeatureLayerDetails = layerDetails as FeatureLayerDetails;
                if (featureLayerDetails)
                {
                    var editFieldsInfo:EditFieldsInfo = featureLayerDetails.editFieldsInfo;
                    if (editFieldsInfo)
                    {
                        editorTrackingFieldNames.push(editFieldsInfo.creatorField);
                        editorTrackingFieldNames.push(editFieldsInfo.creationDateField);
                        editorTrackingFieldNames.push(editFieldsInfo.editorField);
                        editorTrackingFieldNames.push(editFieldsInfo.editDateField);
                    }
                }

                return editorTrackingFieldNames;
            }

            private function actionsItemRenderer(fieldSettingsOption:FieldSettingsOption, column:GridColumn):IFactory
            {
                var field:Field = findMatchingField(fieldSettingsOption.name);
                var isDateField:Boolean = field && (field.type == Field.TYPE_DATE);

                var itemRendererClass:Class =
                    (isDateField) ? MovableEditableGridItemRenderer : MovableGridItemRenderer;

                return new ClassFactory(itemRendererClass);
            }

            private function findMatchingField(name:String):Field
            {
                var matchingField:Field;

                for each (var field:Field in availableFields)
                {
                    if (field.name == name)
                    {
                        matchingField = field;
                        break;
                    }
                }

                return matchingField;
            }

            private function fieldSettingsOptionsDataGrid_editItemHandler(event:ModifyItemEvent):void
            {
                var fieldFormatPopUp:FieldFormatPopUp = new FieldFormatPopUp();
                var fieldSettingOption:FieldSettingsOption = event.item as FieldSettingsOption;
                var fieldName:String = fieldSettingOption.name;

                var fieldSettings:FieldSettings = findMatchingFieldSettings(fieldName);
                if (fieldSettings)
                {
                    //we create a fake field format
                    //since it's not a part of FieldSettings
                    //but required by FieldFormatPopUp
                    var fieldFormat:PopUpFieldFormat = new PopUpFieldFormat();
                    fieldFormat.dateFormat = fieldSettings.dateFormat;
                    fieldFormat.useUTC = fieldSettings.useUTC;
                    fieldFormatPopUp.overrideFieldFormat(fieldFormat);
                }

                fieldFormatPopUp.field = findMatchingField(fieldName);
                fieldFormatPopUp.addEventListener(PopUpEvent.CLOSE, fieldFormatPopUp_closeHandler);
                fieldFormatPopUp.open(FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
            }

            private function findMatchingFieldSettings(fieldName:String):FieldSettings
            {
                var settings:FieldSettings;

                for each (var fieldSettingOption:FieldSettingsOption in availableFieldSettingsOptions.source)
                {
                    if (fieldSettingOption.name == fieldName)
                    {
                        settings = fieldSettingOption.settings;
                        break;
                    }
                }

                return settings;
            }

            private function fieldFormatPopUp_closeHandler(event:PopUpEvent):void
            {
                var fieldFormatPopUp:FieldFormatPopUp = event.currentTarget as FieldFormatPopUp;
                fieldFormatPopUp.removeEventListener(PopUpEvent.CLOSE, fieldFormatPopUp_closeHandler);
                if (event.commit)
                {
                    var fieldFormat:PopUpFieldFormat = event.data.fieldFormat as PopUpFieldFormat;
                    var fieldSettings:FieldSettings = findMatchingFieldSettings(fieldFormatPopUp.field.name);
                    fieldSettings.dateFormat = fieldFormat.dateFormat;
                    fieldSettings.useUTC = fieldFormat.useUTC;
                }
            }

            private function fieldSettingsOptionsDataGrid_moveItemDownHandler(event:ModifyItemEvent):void
            {
                ItemModifierDataGrid.moveItemDown(event.item, availableFieldSettingsOptions);
            }

            private function fieldSettingsOptionsDataGrid_moveItemUpHandler(event:ModifyItemEvent):void
            {
                ItemModifierDataGrid.moveItemUp(event.item, availableFieldSettingsOptions);
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="showRequired"/>
    </s:states>

    <!--background-->
    <s:Rect left="0" right="0" top="0" bottom="0">
        <s:fill>
            <s:SolidColor color="#FFFFFF"/>
        </s:fill>
        <s:stroke>
            <s:SolidColorStroke caps="none"
                                color="#000000"
                                joints="miter"
                                miterLimit="4"
                                weight="2"/>
        </s:stroke>
    </s:Rect>

    <s:Rect height="25"
            left="2" right="2" top="2">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry alpha="1"
                                 color="#FFFFFF"
                                 ratio="0"/>
                <s:GradientEntry alpha="1.0"
                                 color="#CCCCCC"
                                 ratio="1"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>

    <s:Line left="0" right="0" top="26">
        <s:stroke>
            <s:SolidColorStroke caps="none"
                                color="#000000"
                                joints="miter"
                                miterLimit="4"
                                weight="2"/>
        </s:stroke>
    </s:Line>

    <!--content-->
    <s:Label left="10" top="9"
             color="#000000"
             fontSize="14"
             styleName="boldText"
             text="{resourceManager.getString('BuilderStrings', 'configureLayerFields')}"
             textAlign="center"
             verticalAlign="middle"/>

    <s:Form width="100%" top="20">
        <s:layout>
            <s:FormLayout gap="-10"/>
        </s:layout>

        <s:FormItem width="100%" label="{resourceManager.getString('BuilderStrings', 'edit.fields')}">
            <s:Label includeInLayout="{availableFieldSettingsOptions.length == 0}"
                     text="{resourceManager.getString('BuilderStrings', 'noFieldsAvailable')}"
                     visible="{availableFieldSettingsOptions.length == 0}"/>

            <components:ItemModifierDataGrid width="100%" height="250"
                                             dataProvider="{availableFieldSettingsOptions}"
                                             doubleClickEnabled="false"
                                             editItem="fieldSettingsOptionsDataGrid_editItemHandler(event)"
                                             editable="true"
                                             includeInLayout="{availableFieldSettingsOptions.length &gt; 0}"
                                             moveItemDown="fieldSettingsOptionsDataGrid_moveItemDownHandler(event)"
                                             moveItemUp="fieldSettingsOptionsDataGrid_moveItemUpHandler(event)"
                                             visible="{availableFieldSettingsOptions.length &gt; 0}">
                <components:columns>
                    <s:ArrayList>
                        <s:GridColumn width="60"
                                      dataField="selected"
                                      editable="false"
                                      headerRenderer="com.esri.builder.renderers.CheckBoxGridHeaderRenderer"
                                      headerText="{resourceManager.getString('BuilderStrings', 'include')}"
                                      itemRenderer="com.esri.builder.renderers.CheckBoxGridItemRenderer"
                                      maxWidth="60"/>

                        <s:GridColumn width="100"
                                      dataField="name"
                                      editable="false"
                                      headerText="{resourceManager.getString('BuilderStrings', 'displayFields.name')}"
                                      maxWidth="200"/>

                        <s:GridColumn width="100"
                                      dataField="alias"
                                      editable="true"
                                      headerText="{resourceManager.getString('BuilderStrings', 'displayFields.alias')}"
                                      maxWidth="200"/>

                        <s:GridColumn width="100"
                                      dataField="required"
                                      editable="false"
                                      headerText="{resourceManager.getString('BuilderStrings', 'geoprocessing.required')}"
                                      includeIn="showRequired"
                                      maxWidth="200">
                            <s:itemRenderer>
                                <fx:Component>
                                    <s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                                                        xmlns:s="library://ns.adobe.com/flex/spark"
                                                        clipAndEnableScrolling="true">
                                        <fx:Script>
                                            <![CDATA[
                                                [Bindable]
                                                private var isFieldVisible:Boolean;
                                                [Bindable]
                                                private var isRequiredEditable:Boolean;
                                                [Bindable]
                                                private var isEditable:Boolean;
                                                [Bindable]
                                                private var isEditorTrackingField:Boolean;

                                                override public function prepare(hasBeenRecycled:Boolean):void
                                                {
                                                    if (data)
                                                    {
                                                        isEditorTrackingField = data.isEditorTrackingField;
                                                        isEditable = data.editable;
                                                        isFieldVisible = data.selected;
                                                        isRequiredEditable = data.isRequiredEditable;

                                                        if (isFieldVisible)
                                                        {
                                                            checkBox.selected = isRequiredEditable ? data.required : true;
                                                        }
                                                        else
                                                        {
                                                            checkBox.selected = false;
                                                        }
                                                    }
                                                }

                                                private function updateDataField():void
                                                {
                                                    var isSelected:Boolean = checkBox.selected;
                                                    data.required = isSelected;
                                                    grid.dataProvider.itemUpdated(data, column.dataField, !isSelected, isSelected);
                                                }
                                            ]]>
                                        </fx:Script>

                                        <s:CheckBox id="checkBox"
                                                    change="updateDataField()"
                                                    enabled="{isRequiredEditable &amp;&amp; isFieldVisible}"
                                                    horizontalCenter="0"
                                                    verticalCenter="0"
                                                    visible="{isEditable &amp;&amp; !isEditorTrackingField}"/>
                                    </s:GridItemRenderer>
                                </fx:Component>
                            </s:itemRenderer>
                        </s:GridColumn>

                        <s:GridColumn width="100"
                                      editable="false"
                                      headerText="{resourceManager.getString('BuilderStrings', 'popUpConfigPopUp.media.actions')}"
                                      itemRendererFunction="actionsItemRenderer"/>
                    </s:ArrayList>
                </components:columns>
            </components:ItemModifierDataGrid>
        </s:FormItem>

        <s:FormItem includeInLayout="{showAttachmentsEnabled &amp;&amp; supportsAttachments}"
                    label="{resourceManager.getString('BuilderStrings', 'popUpConfigPopUp.showAttachments')}"
                    visible="{showAttachmentsEnabled &amp;&amp; supportsAttachments}">
            <components:SliderToggleButton deselectedLabel="{resourceManager.getString('BuilderStrings', 'off')}"
                                           selected="@{showAttachments}"
                                           selectedLabel="{resourceManager.getString('BuilderStrings', 'on')}"/>
        </s:FormItem>

        <s:FormItem includeInLayout="{showRelatedRecordsEnabled &amp;&amp; supportsRelatedRecords}"
                    label="{resourceManager.getString('BuilderStrings', 'popUpConfigPopUp.showRelatedRecords')}"
                    visible="{showRelatedRecordsEnabled &amp;&amp; supportsRelatedRecords}">
            <components:SliderToggleButton deselectedLabel="{resourceManager.getString('BuilderStrings', 'off')}"
                                           selected="@{showRelatedRecords}"
                                           selectedLabel="{resourceManager.getString('BuilderStrings', 'on')}"/>
        </s:FormItem>

        <s:FormItem>
            <s:layout>
                <s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
            </s:layout>

            <s:Button click="commitAndClose()"
                      enabled="{hasValidLayerSettingsOptions}"
                      label="{resourceManager.getString('BuilderStrings', 'ok')}"
                      skinClass="com.esri.builder.skins.BlueButtonSkin"/>

            <s:Button click="close(false)"
                      label="{resourceManager.getString('BuilderStrings', 'cancel')}"
                      skinClass="com.esri.builder.skins.LinkButtonSkin"/>
        </s:FormItem>
    </s:Form>
</s:SkinnablePopUpContainer>
